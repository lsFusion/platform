MODULE Security;

REQUIRE System, SystemEvents, Email, Utils;

CLASS UserRole '{security.user.role}';
TABLE userRole (UserRole);

name '{security.name.user.role}' = DATA ISTRING[100](UserRole) CHARWIDTH 20;

sid '{security.sid.user.role}' = DATA STRING[30] (UserRole) CHARWIDTH 10;
userRoleSID = GROUP AGGR UserRole userRole WHERE userRole IS UserRole BY sid (userRole);

// Main role
mainRole = DATA UserRole (User);
mainRole (CustomUser user) = mainRole[User](user) IF user IS CustomUser;
nameMainRole '{security.name.main.role.user}' (User user) = name(mainRole(user));
sidMainRole (CustomUser user) = sid(mainRole(user));

currentUserMainRoleName () = nameMainRole(currentUser());

// Roles
TABLE customUserRole (CustomUser, UserRole);
in '{security.in}' = DATA BOOLEAN (CustomUser, UserRole);

TABLE userUserRole (User, UserRole);
has '{security.in}' (User user, UserRole role) = mainRole(user) = role OR in(user, role) MATERIALIZED;

rolesCount(User user) = GROUP SUM 1 IF has(user, UserRole role) MATERIALIZED;

CONSTRAINT DROPPED(UserRole r IS UserRole) AND PREV(has(User user, r))
    MESSAGE '{security.this.role.is.assigned.to.user}';
    
WHEN SETCHANGED (User u IS User) DO {
    mainRole(u) <- userRoleSID('admin') IF login(u) == 'admin'; 
    in(u, userRoleSID('default')) <- TRUE;        
}

// Forms
FORM userRolesDialog '{security.user.roles}'
    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    
    LIST UserRole OBJECT ur
;

EXTEND FORM customUser
    PROPERTIES(u) nameMainRole BEFORE email(u)

    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(u,ur) in
;

DESIGN customUser {
    details {
        NEW roles {
            caption = '{security.user.roles}';
            MOVE PROPERTY(nameMainRole(u));
            MOVE BOX(ur);
        }
    }
}

EXTEND FORM customUsers
    PROPERTIES(u) READONLY nameMainRole BEFORE name(u)
;

// Copy user role
copy ABSTRACT LIST (UserRole, UserRole);

// Transaction timeout
transactTimeout '{security.transact.timeout}' = DATA INTEGER (UserRole);
transactTimeout '{security.transact.timeout}' (User user) = GROUP MAX transactTimeout(UserRole ur) IF has(user, ur);
currentUserTransactTimeout () = transactTimeout(currentUser());

copy (UserRole from, UserRole to) +{ transactTimeout(to) <- transactTimeout(from); }

// ------------------- User permissions ------------------ //

CLASS Permission {
    permit '{security.permit}',
    forbid '{security.forbid}',
    default '{security.default}'
}

parentPermissionForeground() = IF isDarkTheme() THEN RGB(167,167,167) ELSE RGB(109,109,109);
childPermissionBackground() = IF isDarkTheme() THEN RGB(128,128,128) ELSE RGB(203,203,203);

// Change password
//remove after onStarted
forbidChangePassword '{security.forbid.change.password}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//no equivalent, remove after onstarted
dataForbidChangePassword '{security.forbid.change.password}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;

// Edit profile
//remove after onStarted
forbidEditProfile '{security.forbid.edit.profile}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//no equivalent, remove after onstarted
dataForbidEditProfile '{security.forbid.edit.profile}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;

//remove after onStarted
forbidEditObjects '{security.forbid.edit.objects}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;

// ------- Properties ------- //

TABLE userRoleActionOrProperty (UserRole, ActionOrProperty);
TABLE userRolePropertyGroup (UserRole, PropertyGroup);

// ----- View ----- //

// --- Global --- //

// - Permit - //
//remove after onStarted
dataPermitView = DATA BOOLEAN (PropertyGroup);
//remove after onStarted
dataPermitView = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// - Forbid - //
//remove after onStarted
dataForbidView = DATA BOOLEAN (PropertyGroup) CHARWIDTH 10;
//remove after onStarted
dataForbidView = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// --- Roles --- // 

updatePermissionUserRoleNavigatorElement  INTERNAL 'lsfusion.server.logics.navigator.UpdatePermissionAction' (STRING, STRING, STRING);
updatePermissionUserRoleActionOrProperty  INTERNAL 'lsfusion.server.logics.property.UpdatePermissionAction' (STRING, STRING, STRING, STRING);
dropCachedSecurityPolicy  INTERNAL 'lsfusion.server.logics.DropCachedSecurityPolicyAction' (STRING);

// - Permit - //
//remove after onStarted
permitViewAllProperty '{security.permit.view.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
dataPermitView = DATA BOOLEAN (UserRole, PropertyGroup);
//remove after onStarted
dataPermitView = DATA BOOLEAN (UserRole, ActionOrProperty);

// - Forbid - //
//remove after onStarted
forbidViewAllProperty '{security.forbid.view.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
dataForbidView = DATA BOOLEAN (UserRole, PropertyGroup); 
//remove after onStarted
dataForbidView = DATA BOOLEAN (UserRole, ActionOrProperty);     
    
dataPermissionView = DATA Permission (UserRole, PropertyGroup);
nearestParentPermissionView (UserRole ur, PropertyGroup g) =
    GROUP LAST dataPermissionView(ur, PropertyGroup parent) IF dataPermissionView(ur, parent) ORDER DESC level(g, parent) MATERIALIZED;    
foregroundPermissionView (UserRole ur, PropertyGroup g) = parentPermissionForeground() IF NOT dataPermissionView(ur, g);
backgroundPermissionView(UserRole ur, PropertyGroup p) = childPermissionBackground() IF GROUP SUM 1 IF level(PropertyGroup child, p) AND dataPermissionView(ur, child) AND 
    (NOT dataPermissionView(ur, p) OR dataPermissionView(ur, child) != dataPermissionView(ur, p));        
permissionView (UserRole ur, PropertyGroup g) = OVERRIDE dataPermissionView(ur, g), nearestParentPermissionView(ur, g);  
captionPermissionView '{security.view}' (UserRole ur, PropertyGroup g) = staticCaption(OVERRIDE permissionView(ur, g), Permission.default) CHARWIDTH 10;  

dataPermissionView = DATA Permission (UserRole, ActionOrProperty);          
foregroundPermissionView (UserRole ur, ActionOrProperty p) = parentPermissionForeground() IF NOT dataPermissionView(ur, p);    

permissionView '{security.view}' (UserRole ur, ActionOrProperty p) = OVERRIDE dataPermissionView(ur, p), nearestParentPermissionView(ur, parent(p));
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permissionView(ur, ActionOrProperty p))) > 100 DO
    dropCachedSecurityPolicy(s);
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permissionView(ur, ActionOrProperty p))) <= 100 NOINLINE DO
    FOR CHANGED (permissionView(ur, ActionOrProperty p)) DO
        updatePermissionUserRoleActionOrProperty(sid(ur), canonicalName(p), staticName(permissionView(ur, p)), 'view');

namePermissionView (UserRole ur, ActionOrProperty p) = staticName(permissionView(ur, p));
captionPermissionView '{security.view}' (UserRole ur, ActionOrProperty p) = staticCaption(OVERRIDE permissionView(ur, p), Permission.default) CHARWIDTH 10;         

// - Permit - //
//remove after onStarted
dataPermitChange = DATA BOOLEAN (PropertyGroup);
//remove after onStarted
dataPermitChange = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// - Forbid - //
//remove after onStarted
dataForbidChange = DATA BOOLEAN (PropertyGroup) CHARWIDTH 10;
//remove after onStarted
dataForbidChange = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// --- Roles --- // 

// - Permit - //
//remove after onStarted
permitChangeAllProperty '{security.permit.change.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
dataPermitChange = DATA BOOLEAN (UserRole, PropertyGroup);
//remove after onStarted
dataPermitChange = DATA BOOLEAN (UserRole, ActionOrProperty);

// - Forbid - //
//remove after onStarted
forbidChangeAllProperty '{security.forbid.change.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted    
dataForbidChange = DATA BOOLEAN (UserRole, PropertyGroup);
//remove after onStarted
dataForbidChange = DATA BOOLEAN (UserRole, ActionOrProperty);

dataPermissionChange = DATA Permission (UserRole, PropertyGroup);
nearestParentPermissionChange (UserRole ur, PropertyGroup g) =
    GROUP LAST dataPermissionChange(ur, PropertyGroup parent) IF dataPermissionChange(ur, parent) ORDER DESC level(g, parent) MATERIALIZED;         
foregroundPermissionChange (UserRole ur, PropertyGroup g) = parentPermissionForeground() IF NOT dataPermissionChange(ur, g);  
backgroundPermissionChange(UserRole ur, PropertyGroup g) = childPermissionBackground() IF GROUP SUM 1 IF level(PropertyGroup child, g) AND dataPermissionChange(ur, child) AND 
    (NOT dataPermissionChange(ur, child) OR dataPermissionChange(ur, child) != dataPermissionChange(ur, g));    
permissionChange (UserRole ur, PropertyGroup g) = OVERRIDE dataPermissionChange(ur, g), nearestParentPermissionChange(ur, g);
captionPermissionChange '{security.change}' (UserRole ur, PropertyGroup g) = staticCaption(OVERRIDE permissionChange(ur, g), Permission.default) CHARWIDTH 10;

dataPermissionChange = DATA Permission (UserRole, ActionOrProperty);

permissionChange (UserRole ur, ActionOrProperty p) = OVERRIDE dataPermissionChange(ur, p), nearestParentPermissionChange(ur, parent(p));
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permissionChange(ur, ActionOrProperty p))) > 100 DO
    dropCachedSecurityPolicy(s);
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permissionChange(ur, ActionOrProperty p))) <= 100 NOINLINE DO
    FOR CHANGED (permissionChange(ur, ActionOrProperty p)) DO
        updatePermissionUserRoleActionOrProperty(sid(ur), canonicalName(p), staticName(permissionChange(ur, p)), 'change');

namePermissionChange (UserRole ur, ActionOrProperty p) = staticName(permissionChange(ur, p));
foregroundPermissionChange (UserRole ur, ActionOrProperty p) = parentPermissionForeground() IF NOT dataPermissionChange(ur, p);             
captionPermissionChange '{security.change}' (UserRole ur, ActionOrProperty p) = staticCaption(OVERRIDE permissionChange(ur, p), Permission.default) CHARWIDTH 10;      

dataPermissionEditObjects = DATA Permission (UserRole, PropertyGroup);
nearestParentPermissionEditObjects (UserRole ur, PropertyGroup g) =
    GROUP LAST dataPermissionEditObjects(ur, PropertyGroup parent) IF dataPermissionEditObjects(ur, parent) ORDER DESC level(g, parent) MATERIALIZED;         
foregroundPermissionEditObjects (UserRole ur, PropertyGroup g) = parentPermissionForeground() IF NOT dataPermissionEditObjects(ur, g);  
backgroundPermissionEditObjects(UserRole ur, PropertyGroup g) = childPermissionBackground() IF GROUP SUM 1 IF level(PropertyGroup child, g) AND dataPermissionEditObjects(ur, child) AND 
    (NOT dataPermissionEditObjects(ur, child) OR dataPermissionEditObjects(ur, child) != dataPermissionEditObjects(ur, g));    
permissionEditObjects (UserRole ur, PropertyGroup g) = OVERRIDE dataPermissionEditObjects(ur, g), nearestParentPermissionEditObjects(ur, g);
captionPermissionEditObjects '{security.editObjects}' (UserRole ur, PropertyGroup g) = staticCaption(OVERRIDE permissionEditObjects(ur, g), Permission.default) CHARWIDTH 10;

dataPermissionEditObjects = DATA Permission (UserRole, ActionOrProperty);

permissionEditObjects (UserRole ur, ActionOrProperty p) = OVERRIDE dataPermissionEditObjects(ur, p), nearestParentPermissionEditObjects(ur, parent(p));
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permissionEditObjects(ur, ActionOrProperty p))) > 100 DO
    dropCachedSecurityPolicy(s);
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permissionEditObjects(ur, ActionOrProperty p))) <= 100 NOINLINE DO
    FOR CHANGED (permissionEditObjects(ur, ActionOrProperty p)) DO
        updatePermissionUserRoleActionOrProperty(sid(ur), canonicalName(p), staticName(permissionChange(ur, p)), 'editObjects');

namePermissionEditObjects (UserRole ur, ActionOrProperty p) = staticName(permissionEditObjects(ur, p));
foregroundPermissionEditObjects (UserRole ur, ActionOrProperty p) = parentPermissionForeground() IF NOT dataPermissionEditObjects(ur, p);             
captionPermissionEditObjects '{security.editObjects}' (UserRole ur, ActionOrProperty p) = staticCaption(OVERRIDE permissionEditObjects(ur, p), Permission.default) CHARWIDTH 10;      
    
copy (UserRole from, UserRole to) +{
    dataPermissionView(to, ActionOrProperty property) <- dataPermissionView(from, property);
    dataPermissionChange(to, ActionOrProperty property) <- dataPermissionChange(from, property);
    dataPermissionEditObjects(to, ActionOrProperty property) <- dataPermissionEditObjects(from, property);
    dataPermissionView(to, PropertyGroup propertyGroup) <- dataPermissionView(from, propertyGroup);
    dataPermissionChange(to, PropertyGroup propertyGroup) <- dataPermissionChange(from, propertyGroup);
    dataPermissionEditObjects(to, PropertyGroup propertyGroup) <- dataPermissionEditObjects(from, propertyGroup);
}

// ------- Navigator ------- //

TABLE userRoleNavigatorElement (UserRole, NavigatorElement);

// - Permit - //
//remove after onStarted
permit '{security.permit}' = DATA BOOLEAN (NavigatorElement) CHARWIDTH 10;
//remove after onStarted
permitAllForms '{security.permit.all.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
permit '{security.permit}' = DATA BOOLEAN (UserRole, NavigatorElement) CHARWIDTH 10;

// - Forbid - //
//remove after onStarted
forbid '{security.forbid}' = DATA BOOLEAN (NavigatorElement) CHARWIDTH 10;
//remove after onStarted
forbidAllForms '{security.forbid.all.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
forbid '{security.forbid}' = DATA BOOLEAN (UserRole, NavigatorElement) CHARWIDTH 10;  

dataPermission = DATA Permission (UserRole, NavigatorElement);
nearestParentPermission (UserRole ur, NavigatorElement e) = GROUP LAST dataPermission(ur, NavigatorElement parent) IF dataPermission(ur, parent) ORDER DESC level(e, parent) MATERIALIZED;
foregroundPermission (UserRole ur, NavigatorElement e) = parentPermissionForeground() IF NOT dataPermission(ur, e);    

permission (UserRole ur, NavigatorElement e) = OVERRIDE dataPermission(ur, e), nearestParentPermission(ur, e);
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permission(ur, NavigatorElement ne))) > 100 DO
    dropCachedSecurityPolicy(s);
WHEN STRING s = sid(UserRole ur) AND (GROUP SUM 1 IF CHANGED(permission(ur, NavigatorElement ne))) <= 100 NOINLINE DO
    FOR CHANGED (permission(ur, NavigatorElement ne)) DO
        updatePermissionUserRoleNavigatorElement(sid(ur), canonicalName(ne), staticName(permission(ur, ne)));

namePermission (UserRole ur, NavigatorElement e) = staticName(permission(ur, e));
captionPermission '{security.access}' (UserRole ur, NavigatorElement e) = staticCaption(OVERRIDE permission(ur, e), Permission.default) CHARWIDTH 10;

permit (User u, NavigatorElement ne) = 
    (GROUP MAX has(u, UserRole ur) AND permission(ur, ne) == Permission.permit) OR NOT 
    (GROUP MAX has(u, UserRole ur) AND permission(ur, ne) == Permission.forbid);                  

backgroundPermission (UserRole ur, NavigatorElement e)= 
    childPermissionBackground() IF GROUP SUM 1 IF level(NavigatorElement child, e) AND dataPermission(ur, child) AND 
    (NOT dataPermission(ur, e) OR dataPermission(ur, child) != dataPermission(ur, e));

copy (UserRole from, UserRole to) +{
    dataPermission(to, NavigatorElement navigatorElement) <- dataPermission(from, navigatorElement);
}

// ----------------- Form policy ---------------------- //

// Duplicate forms
forbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (CustomUser);
forbidDuplicateForms (CustomUser u) = OVERRIDE dataForbidDuplicateForms(u), GROUP MAX forbidDuplicateForms(UserRole ur) IF has(u, ur);

EXTEND FORM customUsers
    PROPERTIES(u) dataForbidDuplicateForms BEFORE fontSize(u)
;

showDetailedInfo '{security.user.role.show.detailed.info}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
showDetailedInfo (CustomUser u) = GROUP MAX showDetailedInfo(UserRole ur) IF has(u, ur);

// Default forms
defaultNumber '{security.default.forms.number}' = DATA INTEGER (UserRole, NavigatorElement);
defaultNumber (User user, NavigatorElement navigatorElement) = 
    GROUP MIN defaultNumber(UserRole userRole, navigatorElement) IF has(user, userRole);
defaultForms '{security.default.forms}' (UserRole userRole) = GROUP CONCAT caption(NavigatorElement e) IF defaultNumber(userRole, e), ', ' ORDER defaultNumber(userRole, e) CHARWIDTH 50;

maximizeDefaultForms '{security.default.forms.maximize}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
maximizeDefaultFormsCurrentUser() = GROUP MAX maximizeDefaultForms(UserRole ur) IF has(currentUser(), ur);
maximizeForm  INTERNAL 'lsfusion.server.logics.form.interactive.action.MaximizeFormAction' ();

copy (UserRole from, UserRole to) +{
    defaultNumber(to, NavigatorElement navigatorElement) <- defaultNumber(from, navigatorElement);
}

showDefaultForms()  { 
    LOCAL formFound = BOOLEAN ();
    
    FOR actionName = canonicalName(action(NavigatorAction e)) AND defaultNumber(currentUser(), e) ORDER defaultNumber(currentUser(), e) DO {
        LOCAL NESTED action = TEXT ();
        LOCAL NESTED maximize = BOOLEAN();
        FOR formName = canonicalName(form(e)) DO { 
            IF NOT formFound() THEN {
                formFound() <- TRUE;
                maximize() <- TRUE;
            }
            action() <- 'SHOW ' + formName + ' NOWAIT';
        } ELSE
            action() <- actionName + '()';
            
        NEWSESSION EVAL 'run() \{ ' + action() + '; \};';
        IF maximize() AND maximizeDefaultFormsCurrentUser() THEN 
            maximizeForm();
    }
   
    IF NOT formFound() AND maximizeDefaultFormsCurrentUser() THEN
        maximizeForm();
}

onDesktopClientStarted() + {  showDefaultForms(); }
onWebClientStarted() + {  showDefaultForms(); }

// ------------------ Custom policies ---------------- //
//remove after onStarted
CLASS Policy '{security.policy}';
TABLE policy (Policy);
id '{integration.id}' = DATA STRING[100](Policy);
policy = GROUP AGGR Policy policy BY id(policy);
name '{security.name.policy}' = DATA ISTRING[100](Policy);
description '{security.description.policy}' = DATA STRING[100] (Policy);

//remove after onStarted
TABLE userRolePolicy (UserRole, Policy);
order '{security.order.policy}' = DATA INTEGER (UserRole, Policy);

createSystemUserRoles() {
    IF NOT userRoleSID('admin') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'admin';
            name(ur) <- ISTRING[100] ('{security.user.role.admin}');
            showDetailedInfo(ur) <- TRUE;      
            dataPermission(ur, navigatorElementCanonicalName('System.root')) <- Permission.permit;        
            dataPermissionView(ur, propertyGroup('System_root')) <- Permission.permit;        
            dataPermissionChange(ur, propertyGroup('System_root')) <- Permission.permit;            
            dataPermissionEditObjects(ur, propertyGroup('System_root')) <- Permission.permit;            
        }
    }

    IF NOT userRoleSID('readonly') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'readonly';
            name(ur) <- ISTRING[100] ('{security.user.role.readonly}');
            dataPermissionChange(ur, propertyGroup('System_root')) <- Permission.forbid;
        }
    }
    
     IF NOT userRoleSID('default') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'default';
            name(ur) <- ISTRING[100] ('{security.user.role.default}');
        }
     }   
}

newPermissionPolicy = DATA BOOLEAN ();
onStarted() + {
    //newPermissionPolicy() <- NULL;
    IF NOT newPermissionPolicy() THEN {
        dataPermission(UserRole ur, NavigatorElement e) <- Permission.forbid WHERE forbid(ur, e);
        dataPermission(UserRole ur, NavigatorElement e) <- Permission.permit WHERE permit(ur, e);
        dataPermissionView(UserRole ur, ActionOrProperty p) <- Permission.forbid WHERE dataForbidView(ur, p);
        dataPermissionView(UserRole ur, ActionOrProperty p) <- Permission.permit WHERE dataPermitView(ur, p);
        permissionChange(UserRole ur, ActionOrProperty p) <- Permission.forbid WHERE dataForbidChange(ur, p);
        permissionChange(UserRole ur, ActionOrProperty p) <- Permission.permit WHERE dataPermitChange(ur, p);
        dataPermission(userRoleSID('default'), NavigatorElement e) <- Permission.forbid WHERE forbid(e);
        dataPermission(userRoleSID('default'), NavigatorElement e) <- Permission.permit WHERE permit(e);
        dataPermissionView(userRoleSID('default'), PropertyGroup g) <- Permission.forbid WHERE dataForbidView(g);
        dataPermissionView(userRoleSID('default'), PropertyGroup g) <- Permission.permit WHERE dataPermitView(g);
        dataPermissionView(userRoleSID('default'), ActionOrProperty p) <- Permission.forbid WHERE dataForbidView(p);
        dataPermissionView(userRoleSID('default'), ActionOrProperty p) <- Permission.permit WHERE dataPermitView(p);
        dataPermissionChange(userRoleSID('default'), PropertyGroup g) <- Permission.forbid WHERE dataForbidChange(g);
        dataPermissionChange(userRoleSID('default'), PropertyGroup g) <- Permission.permit WHERE dataPermitChange(g);
        dataPermissionChange(userRoleSID('default'), ActionOrProperty p) <- Permission.forbid WHERE dataForbidChange(p);
        dataPermissionChange(userRoleSID('default'), ActionOrProperty p) <- Permission.permit WHERE dataPermitChange(p);
        dataPermissionView(UserRole ur, PropertyGroup g) <- Permission.forbid WHERE dataForbidView(ur, g);
        dataPermissionView(UserRole ur, PropertyGroup g) <- Permission.permit WHERE dataPermitView(ur, g);
        dataPermissionChange(UserRole ur, PropertyGroup g) <- Permission.forbid WHERE dataForbidChange(ur, g);
        dataPermissionChange(UserRole ur, PropertyGroup g) <- Permission.permit WHERE dataPermitChange(ur, g);         
        
        dataPermission(UserRole ur, navigatorElementCanonicalName('System.root')) <- Permission.forbid WHERE forbidAllForms(ur);
        dataPermission(UserRole ur, navigatorElementCanonicalName('System.root')) <- Permission.permit WHERE permitAllForms(ur);
        dataPermissionView(UserRole ur, propertyGroup('System_root')) <- Permission.forbid WHERE forbidViewAllProperty(ur);
        dataPermissionView(UserRole ur, propertyGroup('System_root')) <- Permission.permit WHERE permitViewAllProperty(ur);
        dataPermissionChange(UserRole ur, propertyGroup('System_root')) <- Permission.forbid WHERE forbidChangeAllProperty(ur);
        dataPermissionChange(UserRole ur, propertyGroup('System_root')) <- Permission.permit WHERE permitChangeAllProperty(ur);
        
        in(CustomUser u, userRoleSID('readonly')) <- TRUE WHERE GROUP SUM order(UserRole ur, policy('readonly')) IF has(u, ur);      
        in(CustomUser u, userRoleSID('default')) <- TRUE;
        in(CustomUser u, userRoleSID('admin')) <- TRUE WHERE login(u) == 'admin';          
        showDetailedInfo(UserRole ur) <- TRUE WHERE order(ur, policy('allowConfiguration'));
        
        dataPermission(UserRole ur, navigatorElementCanonicalName('System.root')) <- Permission.permit WHERE order(ur, policy('allowAll'));        
        dataPermissionView(UserRole ur, propertyGroup('System_root')) <- Permission.permit WHERE order(ur, policy('allowAll'));        
        dataPermissionChange(UserRole ur, propertyGroup('System_root')) <- Permission.permit WHERE order(ur, policy('allowAll'));        
        
        dataPermissionEditObjects(UserRole ur, propertyGroup('System_root')) <- Permission.forbid WHERE forbidEditObjects(ur);    
        dataPermission(UserRole ur, navigatorElementCanonicalName('Authentication.changePasswordAction')) <- Permission.forbid WHERE forbidChangePassword(ur);
        dataPermission(UserRole ur, navigatorElementCanonicalName('Authentication.editProfile')) <- Permission.forbid WHERE forbidEditProfile(ur);
        
        newPermissionPolicy() <- TRUE;
    }     
}

// ------------------ Security policy form ----------------------- //

FORM securityPolicy '{security.form.policy}'
 
    OBJECTS ur = UserRole
    PROPERTIES(ur) name, sid
    PROPERTIES(ur) NEW, DELETE
    
    PROPERTIES(ur) showDetailedInfo, forbidDuplicateForms, transactTimeout, defaultForms, maximizeDefaultForms

    // Navigator elements
    TREE navigatorElements te = NavigatorElement PARENT parent(te)
    PROPERTIES(te) READONLY caption, canonicalName
    PROPERTIES(ur, te) captionPermission FOREGROUND foregroundPermission(ur, te) BACKGROUND backgroundPermission(ur, te)
    PROPERTIES(ur, te) defaultNumber
    PROPERTIES(te) READONLY number
    ORDER number(te)

    OBJECTS f = NavigatorElement
    PROPERTIES(f) READONLY caption, canonicalName
    PROPERTIES(ur, f) captionPermission FOREGROUND foregroundPermission(ur, f), defaultNumber

    // Properties
    TREE properties tprs = PropertyGroup PARENT parent(tprs), prs = ActionOrProperty 
    PROPERTIES(tprs) READONLY caption, SID
    PROPERTIES(prs)  READONLY caption, canonicalName
    PROPERTIES(ur, tprs) captionPermissionView FOREGROUND foregroundPermissionView(ur, tprs) BACKGROUND backgroundPermissionView(ur, tprs)
    PROPERTIES(ur, tprs) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, tprs) BACKGROUND backgroundPermissionChange(ur, tprs)
    PROPERTIES(ur, tprs) captionPermissionEditObjects FOREGROUND foregroundPermissionEditObjects(ur, tprs) BACKGROUND backgroundPermissionEditObjects(ur, tprs)
    PROPERTIES(ur, prs) captionPermissionView FOREGROUND foregroundPermissionView(ur, prs)
    PROPERTIES(ur, prs) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, prs)
    PROPERTIES(ur, prs) captionPermissionEditObjects FOREGROUND foregroundPermissionEditObjects(ur, prs)
    PROPERTIES(tprs) READONLY number
    PROPERTIES(prs) READONLY number
    ORDER number(tprs), number(prs)
    FILTERS parent(prs) = tprs
    
    OBJECTS pr = ActionOrProperty
    PROPERTIES(pr) READONLY caption, canonicalName
    PROPERTIES(ur, pr) captionPermissionView FOREGROUND foregroundPermissionView(ur, pr)
    PROPERTIES(ur, pr) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, pr)
    PROPERTIES(ur, pr) captionPermissionEditObjects FOREGROUND foregroundPermissionEditObjects(ur, pr)
;

DESIGN securityPolicy {
    OBJECTS {
        NEW container {
            fill = 1;
              
            type = SPLITV;
            NEW roleHeader {
                fill = 1;
                MOVE BOX(ur) {
                    GRID(ur) { headerHeight = 60; }
                }
            }

            NEW rolePolicyContainer {
                fill = 1;
                type = TABBED;

                NEW elementsContainer {
                    type = TABBED;
                    caption = '{security.form.navigator}';
                    MOVE BOX(TREE navigatorElements) { caption = '{security.form.tree}'; }
                    MOVE BOX(f) { caption = '{security.form.table}'; }
                }

                NEW propertiesContainer {
                    type = TABBED;
                    caption = '{security.form.properties}';
                    MOVE BOX(TREE properties) { caption = '{security.form.tree}'; }
                    MOVE BOX(pr) { caption = '{security.form.table}'; }
                }
                
                NEW roleApplicationScroll {
                    caption = '{security.form.application.settings}';
                    type = SCROLL;
                    NEW roleApplicationPane {
                        MOVE PANEL(ur);
                        NEW roleApplicationSettings {
                            type = COLUMNS;
                            columns = 3;
                        }
                    }
                }
            }
        }
    }
}

META addRoleApplicationSetting (name, caption, type)
    name caption = DATA type (UserRole) COMPLEX;
    
    EXTEND FORM securityPolicy PROPERTIES (ur) PANEL name;
    DESIGN securityPolicy { roleApplicationSettings { MOVE PROPERTY(name(ur)); }}
END

copy '{security.copy.role}' (UserRole from)  { 
    NEW to = UserRole {
        copy(from, to);
        SEEK securityPolicy.ur = to;
    }
}

EXTEND FORM securityPolicy
    PROPERTIES(ur) copy TOOLBAR
;

NAVIGATOR {
    security {
        NEW securityPolicy;
    }
}

// ----------------- Property and action policy forms ----------------- //

// - Property - //
FORM propertyPolicy '{security.form.policy}'
    OBJECTS p = Property PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    PROPERTIES(p) userLoggable, isSetNotNull
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur, p) captionPermissionView FOREGROUND foregroundPermissionView(ur, p)
    PROPERTIES(ur, p) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, p)
    PROPERTIES(ur, p) captionPermissionEditObjects FOREGROUND foregroundPermissionEditObjects(ur, p)
;

DESIGN propertyPolicy {
    OBJECTS {
        NEW property {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.property}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.parameters}';
            MOVE PROPERTY(userLoggable(p));
            MOVE PROPERTY(isSetNotNull(p));
        }
        MOVE BOX(ur);
    }
}

checkCurrentDateDependsAction  INTERNAL  'lsfusion.server.physics.admin.authentication.action.CheckCurrentDateDependsAction' (Property);
WHEN FORMS propertyPolicy, properties SETCHANGED(userLoggable(Property p)) DO checkCurrentDateDependsAction(p);

// - Action - //
FORM actionPolicy '{security.form.policy}'
    OBJECTS p = Action PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur, p) captionPermissionView FOREGROUND foregroundPermissionView(ur, p)
    PROPERTIES(ur, p) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, p)
    PROPERTIES(ur, p) captionPermissionEditObjects FOREGROUND foregroundPermissionEditObjects(ur, p)
;

DESIGN actionPolicy {
    OBJECTS {
        NEW property {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.action}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.access}';
        }
        MOVE BOX(ur);
    }
}

initHeapSize '{security.client.init.heap.size}' = DATA STRING[100]();
maxHeapSize '{security.client.max.heap.size}' = DATA STRING[100]();
minHeapFreeRatio '{security.client.min.heap.free.ratio}' = DATA STRING[100]();
maxHeapFreeRatio '{security.client.max.heap.free.ratio}' = DATA STRING[100]();
vmargs '{security.client.vm.args}' = DATA STRING[100]();

generateJnlp INTERNAL 'lsfusion.server.logics.navigator.GenerateJNLPAction' (STRING[10], STRING[1000]) NULL @@noauth;

// ------------------ Memory limits ---------------- //
CLASS MemoryLimit '{security.memory.limit}';
TABLE memoryLimit (MemoryLimit);

name '{security.name.memory.limit}' = DATA STRING[100] (MemoryLimit);
maxHeapSize '{security.max.heap.size.memory.limit}' = DATA STRING[10] (MemoryLimit);
vmargs '{security.vm.args.memory.limit}' = DATA STRING[1000] (MemoryLimit);

generateJnlpUrls () {

    LOCAL execURL = STRING();
    //we use generateJnlp without params because linux mint cut from url '%5'
    execURL() <- CONCAT '', '\{contextPath\}/exec?', IF query() THEN query() + '&' ELSE '', 'action=Security.generateJnlp';

    FOR MemoryLimit ml IS MemoryLimit DO {
        exportText() <- CONCAT '', exportText(), '<a href="', execURL(), '&p=', IF maxHeapSize(ml) THEN maxHeapSize(ml) ELSE '';
        IF vmargs(ml) THEN {
            urlEncode(vmargs(ml), 'UTF-8');
            exportText() <- CONCAT '', exportText(), '&p=', urlEncoded();
        }
        exportText() <- CONCAT '', exportText(), '">{security.run.desktop.client} ', name(ml), '</a><br/>';   
    }
    
   IF(exportText()) THEN {  
        exportText() <- CONCAT '', '<details><summary>', '<a href="', execURL(), '">{security.run.desktop.client}</a>', '</summary>', exportText(), '</details>';
   } ELSE {
        exportText() <- CONCAT '', '<a href="', execURL(), '">{security.run.desktop.client}</a>';     
   }
}

// find forms

FORM findNavigator '{reflection.find.navigator}'
    TREE elements e = NavigatorElement PARENT parent(e)
    PROPERTIES(e) READONLY BACKGROUND NOT e IS NavigatorFolder caption
;

findText '{reflection.find.text}' = DATA LOCAL STRING[100] ();
changeFindText () {
    INPUT s = findText() CHANGE DO {
        EXPAND ALL TOP findNavigator.e;
    }
}

EXTEND FORM findNavigator
    PROPERTIES() findText ON CHANGE changeFindText()
    FILTERS (GROUP SUM 1 IF isISubstring(caption(NavigatorElement child), findText()) AND 
                            NOT child IS NavigatorFolder AND permit(currentUser(), child) AND
                            level(child, e)) 
;

openForm '{reflection.open.form}' (NavigatorElement e) {
    IF NOT e IS NavigatorFolder AND canonicalName(form(e)) THEN
        NEWSESSION EVAL 'run() \{ SHOW ' + canonicalName(form(e)) + ' NOWAIT; \};';
} TOOLBAR CHANGEMOUSE 'DBLCLK';

EXTEND FORM findNavigator
    PROPERTIES openForm(e);
;

DESIGN findNavigator {
    NEW params FIRST {
        alignment = STRETCH;
        MOVE PROPERTY(findText()) { fill = 1; fontSize = 20; }
    }
}

NAVIGATOR {
    NEW findNavigator IMAGE 'search.png';
}