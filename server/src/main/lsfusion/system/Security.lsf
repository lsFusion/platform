MODULE Security;

REQUIRE System, SystemEvents, Email, Utils;

CLASS UserRole '{security.user.role}';
TABLE userRole (UserRole);

name '{security.name.user.role}' = DATA ISTRING[100](UserRole) CHARWIDTH 20;

sid '{security.sid.user.role}' = DATA STRING[30] (UserRole) CHARWIDTH 10;
userRoleSID = GROUP AGGR UserRole userRole WHERE userRole IS UserRole BY sid (userRole);

// Main role
mainRole = DATA UserRole (User);
mainRole (CustomUser user) = mainRole[User](user) IF user IS CustomUser;
nameMainRole '{security.name.main.role.user}' (User user) = name(mainRole(user));
sidMainRole (CustomUser user) = sid(mainRole(user));

currentUserMainRoleName () = nameMainRole(currentUser());

// Default main role
defaultMainRole = DATA UserRole();
nameDefaultMainRole '{security.name.default.main.role}' = name(defaultMainRole());
mainRole[User](CustomUser u) <- defaultMainRole() WHEN SET(u IS CustomUser);

// Roles
TABLE customUserRole (CustomUser, UserRole);
in '{security.in}' = DATA BOOLEAN (CustomUser, UserRole);

TABLE userUserRole (User, UserRole);
has '{security.in}' (User user, UserRole role) = mainRole(user) = role OR in(user, role) MATERIALIZED;

rolesCount(User user) = GROUP SUM 1 IF has(user, UserRole role) MATERIALIZED;

CONSTRAINT DROPPED(UserRole r IS UserRole) AND PREV(has(User user, r))
    MESSAGE '{security.this.role.is.assigned.to.user}';
    
WHEN SETCHANGED (login(CustomUser u)) DO {
    in(u, userRoleSID('default')) <- TRUE;        
}

// Forms
FORM userRolesDialog '{security.user.roles}'
    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    
    LIST UserRole OBJECT ur
;

EXTEND FORM customUser
    PROPERTIES(u) nameMainRole BEFORE email(u)

    OBJECTS ur=UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(u,ur) in
;

DESIGN customUser {
    details {
        NEW roles {
            caption = '{security.user.roles}';
            MOVE PROPERTY(nameMainRole(u));
            MOVE BOX(ur);
        }
    }
}

EXTEND FORM customUsers
    PROPERTIES(u) READONLY nameMainRole BEFORE name(u)
;

// Copy user role
copy ABSTRACT LIST (UserRole, UserRole);

// Transaction timeout
transactTimeout '{security.transact.timeout}' = DATA INTEGER (UserRole);
transactTimeout '{security.transact.timeout}' (User user) = transactTimeout(mainRole(user));
currentUserTransactTimeout () = transactTimeout(currentUser());

copy (UserRole from, UserRole to) +{ transactTimeout(to) <- transactTimeout(from); }

// ------------------- User permissions ------------------ //

CLASS Permission {
    permit '{security.permit}',
    forbid '{security.forbid}'
}

parentPermissionForeground() = IF isDarkTheme() THEN RGB(167,167,167) ELSE RGB(109,109,109);
childPermissionBackground() = IF isDarkTheme() THEN RGB(128,128,128) ELSE RGB(203,203,203);

// Change password
forbidChangePassword '{security.forbid.change.password}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidChangePassword '{security.forbid.change.password}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
forbidChangePassword(CustomUser u) += OVERRIDE dataForbidChangePassword(u), forbidChangePassword(mainRole(u));

// Edit profile
forbidEditProfile '{security.forbid.edit.profile}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidEditProfile '{security.forbid.edit.profile}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
forbidEditProfile(CustomUser u) += OVERRIDE dataForbidEditProfile(u), forbidEditProfile(mainRole(u));

// Setup policies
forbidViewAllSetupPolicies '{security.view.security.policy.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidViewAllSetupPolicies (User user) = forbidViewAllSetupPolicies(mainRole(user));

forbidChangeAllSetupPolicies '{security.change.security.policy.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidChangeAllSetupPolicies (User user) = forbidChangeAllSetupPolicies(mainRole(user));

forbidEditObjects '{security.forbid.edit.objects}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
forbidEditObjects (User user) = forbidEditObjects(mainRole(user));

copy (UserRole from, UserRole to) +{
    forbidChangePassword(to) <- forbidChangePassword(from);

    forbidEditProfile(to) <- forbidEditProfile(from);

    forbidViewAllSetupPolicies(to) <- forbidViewAllSetupPolicies(from);
    forbidChangeAllSetupPolicies(to) <- forbidChangeAllSetupPolicies(from);
    forbidEditObjects(to) <- forbidEditObjects(from);
}

// ------- Properties ------- //

TABLE userRoleActionOrProperty (UserRole, ActionOrProperty);
TABLE userRolePropertyGroup (UserRole, PropertyGroup);

// ----- View ----- //

// --- Global --- //

// - Permit - //
//remove after onStarted
dataPermitView = DATA BOOLEAN (PropertyGroup);
//remove after onStarted
dataPermitView = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// - Forbid - //
//remove after onStarted
dataForbidView = DATA BOOLEAN (PropertyGroup) CHARWIDTH 10;
//remove after onStarted
dataForbidView = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// --- Roles --- // 

// - Permit - //
//remove after onStarted
permitViewAllProperty '{security.permit.view.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
dataPermitView = DATA BOOLEAN (UserRole, PropertyGroup);
//remove after onStarted
dataPermitView = DATA BOOLEAN (UserRole, ActionOrProperty);

// - Forbid - //
//remove after onStarted
forbidViewAllProperty '{security.forbid.view.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
dataForbidView = DATA BOOLEAN (UserRole, PropertyGroup); 
//remove after onStarted
dataForbidView = DATA BOOLEAN (UserRole, ActionOrProperty);     
    
permissionViewAllProperty = DATA Permission (UserRole);
permissionViewAllPropertyForeground (UserRole ur) = parentPermissionForeground() IF NOT permissionViewAllProperty(ur); 
captionPermissionViewAllProperty '{security.view.all.properties}' (UserRole ur) = staticCaption(OVERRIDE permissionViewAllProperty(ur), Permission.permit) CHARWIDTH 10;
namePermissionViewAllProperty (User user) = staticName(permissionViewAllProperty(mainRole(user)));

dataPermissionView = DATA Permission (UserRole, PropertyGroup);
nearestParentPermissionView (UserRole ur, PropertyGroup g) =
    GROUP LAST dataPermissionView(ur, PropertyGroup parent) IF dataPermissionView(ur, parent) ORDER DESC level(g, parent) MATERIALIZED;    
foregroundPermissionView (UserRole ur, PropertyGroup g) = parentPermissionForeground() IF NOT dataPermissionView(ur, g);
backgroundPermissionView(UserRole ur, PropertyGroup p) = childPermissionBackground() IF GROUP SUM 1 IF level(PropertyGroup child, p) AND dataPermissionView(ur, child) AND 
    (NOT dataPermissionView(ur, p) OR dataPermissionView(ur, child) != dataPermissionView(ur, p));        
permissionView (UserRole ur, PropertyGroup g) = OVERRIDE dataPermissionView(ur, g), nearestParentPermissionView(ur, g);  
captionPermissionView '{security.view}' (UserRole ur, PropertyGroup g) = staticCaption(OVERRIDE permissionView(ur, g), Permission.permit) CHARWIDTH 10;  

dataPermissionView = DATA Permission (UserRole, ActionOrProperty);          
foregroundPermissionView (UserRole ur, ActionOrProperty p) = parentPermissionForeground() IF NOT dataPermissionView(ur, p);    
permissionView '{security.view}' (UserRole ur, ActionOrProperty p) = OVERRIDE dataPermissionView(ur, p), nearestParentPermissionView(ur, parent(p));
captionPermissionView '{security.view}' (UserRole ur, ActionOrProperty p) = staticCaption(OVERRIDE permissionView(ur, p), Permission.permit) CHARWIDTH 10;         

// --- Global + Roles --- //

permitRolesView (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND permissionView(userRole, property) == Permission.permit;
forbidRolesView (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND permissionView(userRole, property) == Permission.forbid;

forbidView (User user, ActionOrProperty property) = forbidRolesView(user, property) AND NOT permitRolesView(user, property);    

// ----- Change ----- //

// --- Global --- //

// - Permit - //
//remove after onStarted
dataPermitChange = DATA BOOLEAN (PropertyGroup);
//remove after onStarted
dataPermitChange = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// - Forbid - //
//remove after onStarted
dataForbidChange = DATA BOOLEAN (PropertyGroup) CHARWIDTH 10;
//remove after onStarted
dataForbidChange = DATA BOOLEAN (ActionOrProperty) CHARWIDTH 10;

// --- Roles --- // 

// - Permit - //
//remove after onStarted
permitChangeAllProperty '{security.permit.change.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
dataPermitChange = DATA BOOLEAN (UserRole, PropertyGroup);
//remove after onStarted
dataPermitChange = DATA BOOLEAN (UserRole, ActionOrProperty);

// - Forbid - //
//remove after onStarted
forbidChangeAllProperty '{security.forbid.change.all.properties}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted    
dataForbidChange = DATA BOOLEAN (UserRole, PropertyGroup);
//remove after onStarted
dataForbidChange = DATA BOOLEAN (UserRole, ActionOrProperty);

dataPermissionChange = DATA Permission (UserRole, PropertyGroup);
nearestParentPermissionChange (UserRole ur, PropertyGroup g) =
    GROUP LAST dataPermissionChange(ur, PropertyGroup parent) IF dataPermissionChange(ur, parent) ORDER DESC level(g, parent) MATERIALIZED;         
foregroundPermissionChange (UserRole ur, PropertyGroup g) = parentPermissionForeground() IF NOT dataPermissionChange(ur, g);  
backgroundPermissionChange(UserRole ur, PropertyGroup g) = childPermissionBackground() IF GROUP SUM 1 IF level(PropertyGroup child, g) AND dataPermissionChange(ur, child) AND 
    (NOT dataPermissionChange(ur, child) OR dataPermissionChange(ur, child) != dataPermissionChange(ur, g));    
permissionChange (UserRole ur, PropertyGroup g) = OVERRIDE dataPermissionChange(ur, g), nearestParentPermissionChange(ur, g);
captionPermissionChange '{security.change}' (UserRole ur, PropertyGroup g) = staticCaption(OVERRIDE permissionChange(ur, g), Permission.permit) CHARWIDTH 10;

dataPermissionChange = DATA Permission (UserRole, ActionOrProperty);
permissionChange (UserRole ur, ActionOrProperty p) = 
    OVERRIDE dataPermissionChange(ur, p), nearestParentPermissionChange(ur, parent(p));
foregroundPermissionChange (UserRole ur, ActionOrProperty p) = parentPermissionForeground() IF NOT dataPermissionChange(ur, p);             
captionPermissionChange '{security.change}' (UserRole ur, ActionOrProperty p) = staticCaption(OVERRIDE permissionChange(ur, p), Permission.permit) CHARWIDTH 10;      

permissionChangeAllProperty = DATA Permission (UserRole);
permissionChangeAllPropertyForeground (UserRole ur) = parentPermissionForeground() IF NOT permissionChangeAllProperty (ur);
captionPermissionChangeAllProperty '{security.change.all.properties}' (UserRole ur) = staticCaption(OVERRIDE permissionChangeAllProperty(ur), Permission.permit) CHARWIDTH 10;
namePermissionChangeAllProperty(User user) = staticName(permissionChangeAllProperty(mainRole(user)));
    
// --- Global + Roles --- //

permitRolesChange (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND permissionChange(userRole, property) == Permission.permit;
forbidRolesChange (User user, ActionOrProperty property) = GROUP SUM 1 IF has(user, UserRole userRole) AND permissionChange(userRole, property) == Permission.forbid;

forbidChange (User user, ActionOrProperty property) = forbidRolesChange (user, property) AND NOT permitRolesChange(user, property);

copy (UserRole from, UserRole to) +{
    permissionViewAllProperty(to) <- permissionViewAllProperty(from);
    permissionChangeAllProperty(to) <- permissionChangeAllProperty(from);
    dataPermissionView(to, ActionOrProperty property) <- dataPermissionView(from, property);
    dataPermissionChange(to, ActionOrProperty property) <- dataPermissionChange(from, property);
    dataPermissionView(to, PropertyGroup propertyGroup) <- dataPermissionView(from, propertyGroup);
    dataPermissionChange(to, PropertyGroup propertyGroup) <- dataPermissionChange(from, propertyGroup);
}

createSystemUserRoles() {
    IF NOT userRoleSID('readonly') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'readonly';
            name(ur) <- ISTRING[100] ('{security.user.role.readonly}');
            permissionChange(ur, propertyGroup('System_root')) <- Permission.forbid;
        }
    }
    
     IF NOT userRoleSID('default') THEN {
        NEW ur = UserRole {
            sid(ur) <- 'default';
            name(ur) <- ISTRING[100] ('{security.user.role.default}');
        }
     }
      
    apply();
}

// ------ Property policy caches ----------- //

cachePropertyPolicy '{security.cache.property.policy}' = DATA BOOLEAN (User) CHARWIDTH 10;
updatePropertyPolicyCaches  INTERNAL  'lsfusion.server.physics.admin.authentication.security.policy.UpdatePropertyPolicyCachesProperty' (User);
WHEN [GROUP SUM 1 IF (CHANGED(forbidView(User user, ActionOrProperty actionOrProperty) AND cachePropertyPolicy(user)) OR 
                      CHANGED(forbidChange(user, actionOrProperty) AND cachePropertyPolicy(user))) BY user](User user) DO
    updatePropertyPolicyCaches(user);
onStarted() + { 
    FOR cachePropertyPolicy(User user) DO 
        updatePropertyPolicyCaches(user);
}

// ------- Navigator ------- //

TABLE userRoleNavigatorElement (UserRole, NavigatorElement);

// - Permit - //
//remove after onStarted
permit '{security.permit}' = DATA BOOLEAN (NavigatorElement) CHARWIDTH 10;
//remove after onStarted
permitAllForms '{security.permit.all.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
permit '{security.permit}' = DATA BOOLEAN (UserRole, NavigatorElement) CHARWIDTH 10;

// - Forbid - //
//remove after onStarted
forbid '{security.forbid}' = DATA BOOLEAN (NavigatorElement) CHARWIDTH 10;
//remove after onStarted
forbidAllForms '{security.forbid.all.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
//remove after onStarted
forbid '{security.forbid}' = DATA BOOLEAN (UserRole, NavigatorElement) CHARWIDTH 10;  

dataPermission = DATA Permission (UserRole, NavigatorElement);
nearestParentPermission (UserRole ur, NavigatorElement e) = GROUP LAST dataPermission(ur, NavigatorElement parent) IF dataPermission(ur, parent) ORDER DESC level(e, parent) MATERIALIZED;
foregroundPermission (UserRole ur, NavigatorElement e) = parentPermissionForeground() IF NOT dataPermission(ur, e);    
permission (UserRole ur, NavigatorElement e) = OVERRIDE dataPermission(ur, e), nearestParentPermission(ur, e);
captionPermission '{security.permission}' (UserRole ur, NavigatorElement e) = staticCaption(OVERRIDE permission(ur, e), Permission.permit) CHARWIDTH 10;

permit (User user, NavigatorElement navigatorElement) = 
    GROUP MAX permission(UserRole userRole, navigatorElement) IF has(user, userRole) AND permission(userRole, navigatorElement) == Permission.permit;  
forbid (User user, NavigatorElement navigatorElement) = 
    GROUP MAX permission(UserRole userRole, navigatorElement) IF has(user, userRole) AND permission(userRole, navigatorElement) == Permission.forbid;      
permission (User user, NavigatorElement navigatorElement) = OVERRIDE permit(user, navigatorElement), forbid(user, navigatorElement), Permission.permit;  
namePermission(User user, NavigatorElement navigatorElement) = staticName(permission(user, navigatorElement));                

backgroundPermission (UserRole ur, NavigatorElement e)= 
    childPermissionBackground() IF GROUP SUM 1 IF level(NavigatorElement child, e) AND dataPermission(ur, child) AND 
    (NOT dataPermission(ur, e) OR dataPermission(ur, child) != dataPermission(ur, e));

copy (UserRole from, UserRole to) +{
    dataPermission(to, NavigatorElement navigatorElement) <- dataPermission(from, navigatorElement);
}

// ----------------- Form policy ---------------------- //

// Duplicate forms
forbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
dataForbidDuplicateForms '{security.forbid.duplicate.forms}' = DATA BOOLEAN (CustomUser) CHARWIDTH 10;
forbidDuplicateForms (CustomUser u) = OVERRIDE dataForbidDuplicateForms(u), forbidDuplicateForms(mainRole(u));

// Default forms
defaultNumber '{security.default.forms.number}' = DATA INTEGER (UserRole, NavigatorElement);
defaultNumber (User user, NavigatorElement navigatorElement) = 
    GROUP MIN defaultNumber(UserRole userRole, navigatorElement) IF has(user, userRole);
defaultForms '{security.default.forms}' (UserRole userRole) = GROUP CONCAT caption(NavigatorElement e) IF defaultNumber(userRole, e), ', ' ORDER defaultNumber(userRole, e) CHARWIDTH 50;

maximizeDefaultForms '{security.default.forms.maximize}' = DATA BOOLEAN (UserRole) CHARWIDTH 10;
maximizeDefaultFormsCurrentUser() = maximizeDefaultForms(mainRole(currentUser()));
maximizeForm  INTERNAL 'lsfusion.server.logics.form.interactive.action.MaximizeFormAction' ();

copy (UserRole from, UserRole to) +{
    defaultNumber(to, NavigatorElement navigatorElement) <- defaultNumber(from, navigatorElement);
}

showDefaultForms()  { 
    LOCAL formFound = BOOLEAN ();
    
    FOR actionName = canonicalName(action(NavigatorAction e)) AND defaultNumber(currentUser(), e) ORDER defaultNumber(currentUser(), e) DO {
        LOCAL NESTED action = TEXT ();
        LOCAL NESTED maximize = BOOLEAN();
        FOR formName = canonicalName(form(e)) DO { 
            IF NOT formFound() THEN {
                formFound() <- TRUE;
                maximize() <- TRUE;
            }
            action() <- 'SHOW ' + formName + ' NOWAIT';
        } ELSE
            action() <- actionName + '()';
            
        NEWSESSION EVAL 'run() \{ ' + action() + '; \};';
        IF maximize() AND maximizeDefaultFormsCurrentUser() THEN 
            maximizeForm();
    }
   
    IF NOT formFound() AND maximizeDefaultFormsCurrentUser() THEN
        maximizeForm();
}

onDesktopClientStarted() + {  showDefaultForms(); }
onWebClientStarted() + {  showDefaultForms(); }

// ------------------ Custom policies ---------------- //
CLASS Policy '{security.policy}';
TABLE policy (Policy);

id '{integration.id}' = DATA STRING[100](Policy);
policy = GROUP AGGR Policy policy BY id(policy);
name '{security.name.policy}' = DATA ISTRING[100](Policy);
policyName = GROUP MAX Policy policy BY name(policy) IF NOT id(policy);
description '{security.description.policy}' = DATA STRING[100] (Policy);

TABLE userRolePolicy (UserRole, Policy);
order '{security.order.policy}' = DATA INTEGER (UserRole, Policy);
order (User user, Policy policy) = order (mainRole(user), policy);

copy (UserRole from, UserRole to) +{
    order(to, Policy userPolicy) <- order(from, userPolicy);
}

//policies migration
migrated = DATA BOOLEAN();
onStarted() + {
    IF NOT migrated() THEN {
        FOR id(Policy policy) DO {
            LOCAL oldPolicy = Policy();
            oldPolicy() <- policyName(name(policy));
            LOCAL newPolicy = Policy();
            newPolicy() <- policy(id(policy));
            
            IF newPolicy() != oldPolicy() THEN {
                FOR(name(UserRole role)) DO {
                    order(role, p) <- order(role, oldPolicy()) WHERE p = newPolicy();
                }
            }
        }
        migrated() <- TRUE;
    }
}

newPermissionPolicy = DATA BOOLEAN ();
onStarted() + {
    //newPermissionPolicy() <- NULL;
    IF NOT newPermissionPolicy() THEN {
        permissionViewAllProperty(UserRole ur) <- Permission.forbid WHERE forbidViewAllProperty(ur);
        permissionViewAllProperty(UserRole ur) <- Permission.permit WHERE permitViewAllProperty(ur);
        permissionChangeAllProperty(UserRole ur) <- Permission.forbid WHERE forbidChangeAllProperty(ur);
        permissionChangeAllProperty(UserRole ur) <- Permission.permit WHERE permitChangeAllProperty(ur);
        dataPermission(UserRole ur, NavigatorElement e) <- Permission.forbid WHERE forbid(ur, e);
        dataPermission(UserRole ur, NavigatorElement e) <- Permission.permit WHERE permit(ur, e);
        dataPermissionView(UserRole ur, ActionOrProperty p) <- Permission.forbid WHERE dataForbidView(ur, p);
        dataPermissionView(UserRole ur, ActionOrProperty p) <- Permission.permit WHERE dataPermitView(ur, p);
        permissionChange(UserRole ur, ActionOrProperty p) <- Permission.forbid WHERE dataForbidChange(ur, p);
        permissionChange(UserRole ur, ActionOrProperty p) <- Permission.permit WHERE dataPermitChange(ur, p);
        dataPermission(userRoleSID('default'), NavigatorElement e) <- Permission.forbid WHERE forbid(e);
        dataPermission(userRoleSID('default'), NavigatorElement e) <- Permission.permit WHERE permit(e);
        dataPermissionView(userRoleSID('default'), PropertyGroup g) <- Permission.forbid WHERE dataForbidView(g);
        dataPermissionView(userRoleSID('default'), PropertyGroup g) <- Permission.permit WHERE dataPermitView(g);
        dataPermissionView(userRoleSID('default'), ActionOrProperty p) <- Permission.forbid WHERE dataForbidView(p);
        dataPermissionView(userRoleSID('default'), ActionOrProperty p) <- Permission.permit WHERE dataPermitView(p);
        dataPermissionChange(userRoleSID('default'), PropertyGroup g) <- Permission.forbid WHERE dataForbidChange(g);
        dataPermissionChange(userRoleSID('default'), PropertyGroup g) <- Permission.permit WHERE dataPermitChange(g);
        dataPermissionChange(userRoleSID('default'), ActionOrProperty p) <- Permission.forbid WHERE dataForbidChange(p);
        dataPermissionChange(userRoleSID('default'), ActionOrProperty p) <- Permission.permit WHERE dataPermitChange(p);
        dataPermissionView(UserRole ur, PropertyGroup g) <- Permission.forbid WHERE dataForbidView(ur, g);
        dataPermissionView(UserRole ur, PropertyGroup g) <- Permission.permit WHERE dataPermitView(ur, g);
        dataPermissionChange(UserRole ur, PropertyGroup g) <- Permission.forbid WHERE dataForbidChange(ur, g);
        dataPermissionChange(UserRole ur, PropertyGroup g) <- Permission.permit WHERE dataPermitChange(ur, g);         
        in(CustomUser u, userRoleSID('readonly')) <- TRUE IF GROUP SUM order(UserRole ur, policy('readonly')) IF has(u, ur);
        
        dataPermission(UserRole ur, navigatorElementCanonicalName('System.root')) <- Permission.forbid WHERE forbidAllForms(ur);
        dataPermission(UserRole ur, navigatorElementCanonicalName('System.root')) <- Permission.permit WHERE permitAllForms(ur);
        
        newPermissionPolicy() <- TRUE;
    }     
}

// ------------------ Security policy form ----------------------- //

FORM securityPolicy '{security.form.policy}'
 
    PROPERTIES() nameDefaultMainRole

    OBJECTS ur = UserRole
    PROPERTIES(ur) name, sid
    PROPERTIES(ur) NEW, DELETE
    
    PROPERTIES(ur) captionPermissionViewAllProperty FOREGROUND permissionViewAllPropertyForeground(ur),
                   captionPermissionChangeAllProperty FOREGROUND permissionChangeAllPropertyForeground(ur)
    PROPERTIES(ur) forbidViewAllSetupPolicies, forbidChangeAllSetupPolicies, forbidEditObjects

    PROPERTIES(ur) forbidChangePassword, forbidEditProfile

    PROPERTIES(ur) defaultForms, maximizeDefaultForms, forbidDuplicateForms
    PROPERTIES(ur) transactTimeout
    // Navigator elements
    TREE navigatorElements te = NavigatorElement PARENT parent(te)
    PROPERTIES(te) READONLY caption, canonicalName, number
    PROPERTIES(ur, te) captionPermission FOREGROUND foregroundPermission(ur, te) BACKGROUND backgroundPermission(ur, te)
    PROPERTIES(ur, te) defaultNumber
    ORDER number(te)

    OBJECTS f = NavigatorElement
    PROPERTIES(f) READONLY caption, canonicalName
    PROPERTIES(ur, f) captionPermission FOREGROUND foregroundPermission(ur, f), defaultNumber

    // Properties
    TREE properties tprs = PropertyGroup PARENT parent(tprs), prs = ActionOrProperty 
    PROPERTIES(tprs) READONLY caption, SID, number
    PROPERTIES(prs)  READONLY caption, canonicalName, number
    PROPERTIES(ur, tprs) captionPermissionView FOREGROUND foregroundPermissionView(ur, tprs) BACKGROUND backgroundPermissionView(ur, tprs)
    PROPERTIES(ur, tprs) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, tprs) BACKGROUND backgroundPermissionChange(ur, tprs)
    PROPERTIES(ur, prs) captionPermissionView FOREGROUND foregroundPermissionView(ur, prs)
    PROPERTIES(ur, prs) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, prs)
    ORDER number(tprs), number(prs)
    FILTERS parent(prs) = tprs
    
    OBJECTS pr = ActionOrProperty
    PROPERTIES(pr) READONLY caption, canonicalName
    PROPERTIES(ur, pr) captionPermissionView FOREGROUND foregroundPermissionView(ur, pr)
    PROPERTIES(ur, pr) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, pr)

    // Custom policy
    OBJECTS p = Policy
    PROPERTIES(p) READONLY id, name, description
    PROPERTIES(ur, p) order

    // Users
    OBJECTS u = CustomUser
    PROPERTIES(u) READONLY name, login, nameMainRole
    PROPERTIES(u) dataForbidDuplicateForms, dataForbidChangePassword, dataForbidEditProfile, cachePropertyPolicy
    FILTERS has(u, ur)
;

DESIGN securityPolicy {
    OBJECTS {
        NEW container {
            fill = 1;
              
            type = SPLITV;
            NEW roleHeader {
                fill = 1;
                MOVE PROPERTY(nameDefaultMainRole());
                MOVE BOX(ur) {
                    GRID(ur) { headerHeight = 60; }
                }
            }

            NEW rolePolicyContainer {
                fill = 1;
                type = TABBED;

                NEW elementsContainer {
                    type = TABBED;
                    caption = '{security.form.navigator}';
                    MOVE BOX(TREE navigatorElements) { caption = '{security.form.tree}'; }
                    MOVE BOX(f) { caption = '{security.form.table}'; }
                }

                NEW propertiesContainer {
                    type = TABBED;
                    caption = '{security.form.properties}';
                    MOVE BOX(TREE properties) { caption = '{security.form.tree}'; }
                    MOVE BOX(pr) { caption = '{security.form.table}'; }
                }
                
                MOVE BOX(p);
                MOVE BOX(u) {
                    caption = '{authentication.users}';
                    GRID(u) { headerHeight = 60; }
                }
                
                NEW roleApplicationScroll {
                    caption = '{security.form.application.settings}';
                    type = SCROLL;
                    NEW roleApplicationPane {
                        MOVE PANEL(ur);
                        NEW roleApplicationSettings {
                            type = COLUMNS;
                            columns = 3;
                        }
                    }
                }
            }
        }
    }
}

META addRoleApplicationSetting (name, caption, type)
    name caption = DATA type (UserRole) COMPLEX;
    
    EXTEND FORM securityPolicy PROPERTIES (ur) PANEL name;
    DESIGN securityPolicy { roleApplicationSettings { MOVE PROPERTY(name(ur)); }}
END

copy '{security.copy.role}' (UserRole from)  { 
    NEW to = UserRole {
        copy(from, to);
        SEEK securityPolicy.ur = to;
    }
}

EXTEND FORM securityPolicy
    PROPERTIES(ur) copy TOOLBAR
;

NAVIGATOR {
    security {
        NEW securityPolicy;
    }
}

// ----------------- Property and action policy forms ----------------- //

// - Property - //
FORM propertyPolicy '{security.form.policy}'
    OBJECTS p = Property PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    PROPERTIES(p) userLoggable, isSetNotNull
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur, p) captionPermissionView FOREGROUND foregroundPermissionView(ur, p)
    PROPERTIES(ur, p) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, p)
;

DESIGN propertyPolicy {
    OBJECTS {
        NEW property {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.property}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.access}';
            MOVE PROPERTY(userLoggable(p));
            MOVE PROPERTY(isSetNotNull(p));
        }
        MOVE BOX(ur);
    }
}

checkCurrentDateDependsAction  INTERNAL  'lsfusion.server.physics.admin.authentication.action.CheckCurrentDateDependsAction' (Property);
WHEN FORMS propertyPolicy, properties SETCHANGED(userLoggable(Property p)) DO checkCurrentDateDependsAction(p);

// - Action - //
FORM actionPolicy '{security.form.policy}'
    OBJECTS p = Action PANEL
    PROPERTIES(p) READONLY caption, canonicalName
    
    OBJECTS ur = UserRole
    PROPERTIES(ur) READONLY name, sid
    PROPERTIES(ur, p) captionPermissionView FOREGROUND foregroundPermissionView(ur, p)
    PROPERTIES(ur, p) captionPermissionChange FOREGROUND foregroundPermissionChange(ur, p)
;

DESIGN actionPolicy {
    OBJECTS {
        NEW property {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.action}';
            MOVE PROPERTY(caption(p));
            MOVE PROPERTY(canonicalName(p));
        }
        NEW permission {
            type = CONTAINERH;
            alignment = STRETCH;
            caption = '{security.form.access}';
        }
        MOVE BOX(ur);
    }
}

initHeapSize '{security.client.init.heap.size}' = DATA STRING[100]();
maxHeapSize '{security.client.max.heap.size}' = DATA STRING[100]();
minHeapFreeRatio '{security.client.min.heap.free.ratio}' = DATA STRING[100]();
maxHeapFreeRatio '{security.client.max.heap.free.ratio}' = DATA STRING[100]();
vmargs '{security.client.vm.args}' = DATA STRING[100]();

generateJnlp INTERNAL 'lsfusion.server.logics.navigator.GenerateJNLPAction' (STRING[10], STRING[1000]) NULL @@noauth;

// ------------------ Memory limits ---------------- //
CLASS MemoryLimit '{security.memory.limit}';
TABLE memoryLimit (MemoryLimit);

name '{security.name.memory.limit}' = DATA STRING[100] (MemoryLimit);
maxHeapSize '{security.max.heap.size.memory.limit}' = DATA STRING[10] (MemoryLimit);
vmargs '{security.vm.args.memory.limit}' = DATA STRING[1000] (MemoryLimit);

generateJnlpUrls () {

    LOCAL execURL = STRING();
    //we use generateJnlp without params because linux mint cut from url '%5'
    execURL() <- CONCAT '', '\{contextPath\}/exec?', IF query() THEN query() + '&' ELSE '', 'action=Security.generateJnlp';

    FOR MemoryLimit ml IS MemoryLimit DO {
        exportText() <- CONCAT '', exportText(), '<a href="', execURL(), '&p=', IF maxHeapSize(ml) THEN maxHeapSize(ml) ELSE '';
        IF vmargs(ml) THEN {
            urlEncode(vmargs(ml), 'UTF-8');
            exportText() <- CONCAT '', exportText(), '&p=', urlEncoded();
        }
        exportText() <- CONCAT '', exportText(), '">{security.run.desktop.client} ', name(ml), '</a><br/>';   
    }
    
   IF(exportText()) THEN {  
        exportText() <- CONCAT '', '<details><summary>', '<a href="', execURL(), '">{security.run.desktop.client}</a>', '</summary>', exportText(), '</details>';
   } ELSE {
        exportText() <- CONCAT '', '<a href="', execURL(), '">{security.run.desktop.client}</a>';     
   }
}

// find forms

FORM findNavigator '{reflection.find.navigator}'
    TREE elements e = NavigatorElement PARENT parent(e)
    PROPERTIES(e) READONLY BACKGROUND NOT e IS NavigatorFolder caption
;

findText '{reflection.find.text}' = DATA LOCAL STRING[100] ();
changeFindText () {
    INPUT s = findText() CHANGE DO {
        EXPAND ALL TOP findNavigator.e;
    }
}

EXTEND FORM findNavigator
    PROPERTIES() findText ON CHANGE changeFindText()
    FILTERS (GROUP SUM 1 IF isISubstring(caption(NavigatorElement child), findText()) AND 
                            NOT child IS NavigatorFolder AND
                            permission(currentUser(), child) == Permission.permit AND
                            level(child, e)) 
;

openForm '{reflection.open.form}' (NavigatorElement e) {
    IF NOT e IS NavigatorFolder AND canonicalName(form(e)) THEN
        NEWSESSION EVAL 'run() \{ SHOW ' + canonicalName(form(e)) + ' NOWAIT; \};';
} TOOLBAR CHANGEMOUSE 'DBLCLK';

EXTEND FORM findNavigator
    PROPERTIES openForm(e);
;

DESIGN findNavigator {
    NEW params FIRST {
        alignment = STRETCH;
        MOVE PROPERTY(findText()) { fill = 1; fontSize = 20; }
    }
}

NAVIGATOR {
    NEW findNavigator IMAGE 'search.png';
}