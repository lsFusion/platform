MODULE Slack;

REQUIRE Messenger;

//token starts from 'xoxp'

EXTEND CLASS Messenger { slack 'Slack' }
isSlack(Account a) = messenger(a) == Messenger.slack;
isSynchronize(Messenger m) += WHEN m == Messenger.slack THEN TRUE;
showTitle(Messenger m) += WHEN m == Messenger.slack THEN TRUE;

type = DATA LOCAL STRING();
challenge = DATA LOCAL STRING();

//general fields
ok = DATA LOCAL BOOLEAN();
error = DATA LOCAL STRING();

//usersList fields
userId = DATA LOCAL STRING(INTEGER);
userName = DATA LOCAL STRING(INTEGER);
realName = DATA LOCAL STRING(INTEGER);

//conversationsList fields
GROUP purpose;
value = DATA LOCAL STRING(INTEGER);
is_channel = DATA LOCAL BOOLEAN(INTEGER);
is_group = DATA LOCAL BOOLEAN(INTEGER);
is_im = DATA LOCAL BOOLEAN(INTEGER);
user = DATA LOCAL STRING(INTEGER);
channelId = DATA LOCAL STRING(INTEGER);
channelName = DATA LOCAL STRING(INTEGER);

FORM usersList
    PROPERTIES() ok, error
    OBJECTS members = INTEGER
    PROPERTIES(members) userId EXTID 'id', userName EXTID 'name', realName EXTID 'real_name';

FORM conversationsList
    PROPERTIES() ok, error
    OBJECTS channels = INTEGER
    PROPERTIES(channels) channelId EXTID 'id', channelName EXTID 'name', is_channel, is_group, is_im, user
    PROPERTIES(channels) IN purpose value;

synchronizeChatsSlack (Account a) {
    LOCAL result = JSONFILE();
    
    LOCAL httpHeaders = STRING(STRING);
    httpHeaders('Authorization') <- 'Bearer ' + token(a);
    
    //get user names
    LOCAL usernames = STRING(STRING);
    LOCAL realnames = STRING(STRING);
    EXTERNAL HTTP POST 'https://slack.com/api/users.list' HEADERS httpHeaders TO result;
    IMPORT usersList FROM result();
    IF ok() THEN {
        FOR userId(INTEGER user) DO {
            usernames(userId(user)) <- userName(user);
            realnames(userId(user)) <- realName(user);
        }
   
        LOCAL synchronized = BOOLEAN (Chat);
        //get chats
        EXTERNAL HTTP POST 'https://slack.com/api/conversations.list' BODYURL 'types=public_channel,private_channel,mpim,im' HEADERS httpHeaders TO result;
        IMPORT conversationsList JSON FROM result();
        IF ok() THEN {
            FOR channelId(INTEGER channel) DO {
            
               LOCAL chat = Chat();
               chat() <- chatIdAccount(a, channelId(channel));
               IF NOT chat() THEN {
                   NEW chat = Chat {
                       chat() <- chat;
                       account(chat) <- a;
                       id(chat()) <- channelId(channel);
                   }
               }
               
               IF is_im(channel) THEN {
                   chatType(chat()) <- ChatType.private;
                   name(chat()) <- '@' + usernames(user(channel));
                   title(chat()) <- realnames(user(channel));
               } ELSE IF is_channel(channel) THEN {
                   chatType(chat()) <- ChatType.channel;
                   name(chat()) <- '#' + channelName(channel);
                   title(chat()) <- IF value(channel) != '' THEN value(channel) ELSE channelName(channel);
               } ELSE IF is_group(channel) THEN {
                   chatType(chat()) <- ChatType.group;
                   name(chat()) <- '#' + channelName(channel);
                   title(chat()) <- IF value(channel) != '' THEN value(channel) ELSE channelName(channel);
               }
               synchronized(chat()) <- TRUE;
            }
            DELETE Chat c WHERE NOT synchronized(c) AND account(c) == a;
        } ELSE {
           MESSAGE 'Synchronization failed (conversations.list): ' + error() NOWAIT;
        }
    } ELSE {
        MESSAGE 'Synchronization failed (users.list): ' + error() NOWAIT;
    }
}
synchronizeChats(Account a) + { IF isSlack(a) THEN synchronizeChatsSlack(a); }

sendMessageSlackResult = DATA LOCAL STRING();
sendMessageSlack(Chat chat, STRING message) {
    sendMessageSlackResult() <- NULL;
    
    LOCAL result = JSONFILE();
    
    LOCAL httpHeaders = STRING(STRING);
    httpHeaders('Authorization') <- 'Bearer ' + token(account(chat));
    
    EXTERNAL HTTP POST 'https://slack.com/api/chat.postMessage' HEADERS httpHeaders
            PARAMS JSONFILE('\{"channel": "' + id(chat) + '","text": "' + message + '"\}')TO result;
            
    LOCAL ok = BOOLEAN();
    LOCAL error = STRING();
    IMPORT FROM result() TO() ok, error; 
    IF NOT ok() THEN {
        sendMessageSlackResult() <- error();
    } ELSE {
        NEW botMessage = Message {
            chat(botMessage) <- chat;
            message(botMessage) <- message;
            dateTime(botMessage) <- currentDateTime();
            from(botMessage) <- 'YOU';
        }
    }  
    APPLY;
}

sendMessage(Chat chat, STRING message) + WHEN isSlack(account(chat)) AND message IS STRING THEN {
    sendMessageSlack(chat, message);
    sendMessageResult() <- sendMessageSlackResult();
}