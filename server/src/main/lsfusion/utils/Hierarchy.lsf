MODULE Hierarchy;

REQUIRE Utils;

META defineHierarchy(object)
    @defineHierarchy(object, ###object);
END

META defineHierarchyAbstract(object)
    @defineHierarchyAbstract(object, ###object);
END

META defineHierarchy (object, class)
    parent = DATA class (class) AUTOSET;
    @defineHierarchyCustom(object, class);
END

META defineHierarchyAbstract (object, class)
    parent = ABSTRACT class (class) MATERIALIZED;
    @defineHierarchyCustom(object, class);
END

META defineHierarchyCustom (object, class)
    nameParent '{hierarchy.name.parent}' = name(parent(class object)) IN base;

    level '{hierarchy.level}' (class child, class parent) = RECURSION 1l IF child IS class AND parent == child
                                                                  STEP 2l IF parent == parent($parent) MATERIALIZED;

    object(class child, LONG level)  = GROUP
                                                   MAX class parent IF level == level(child, parent);

    level '{hierarchy.level}'(class child)  = GROUP SUM 1 IF level(child, class parent) MATERIALIZED;

    levelRoot '{hierarchy.level}' (class child, class parent) = PARTITION SUM 1 IF level(child, parent)
                                                                      ORDER DESC level(child, parent)
                                                                      BY child MATERIALIZED;
    object##Root (class child, level) = GROUP NAGGR class parent BY levelRoot(child, parent);  

    isParent '{hierarchy.is.parent}' (class child, class parent) = TRUE IF level(child, parent);

    childNumber '{hierarchy.child.number}' (object) = GROUP SUM 1 BY parent(class child) MATERIALIZED;

    descendantNumber '{hierarchy.descendant.number}'(class parent)  = GROUP SUM 1 IF isParent(class child, parent) MATERIALIZED;

    isLeaf '{hierarchy.is.leaf}' (class object) = object IS class AND NOT childNumber(object) MATERIALIZED;

    isParentLeaf (class child, class parent) = isParent(child, parent) AND isLeaf(child);

    canonicalName '{hierarchy.canonical.name}' (class object) = ISTRING[255](
                           (GROUP CONCAT name(class parent), ' / ' ORDER DESC level(object, parent)))
                           CHARWIDTH 50 MATERIALIZED;
END

META defineHierarchyFilter(object, class, property, caption)
    // фильтры по имени
    filter###property###object caption = DATA LOCAL NESTED STRING[255] () CHARWIDTH 20;
    inFilterName (class parent) = GROUP SUM 1 IF isParent(class child, parent) AND isSubstring(name(child), filter###property###object()); 
    inIFilterName (class parent) = GROUP SUM 1 IF isParent(class child, parent) AND isISubstring(name(child), filter###property###object()); 
END

META defineHierarchyPlain(object)
    object##1 (###object child) = object##Root(child, 1) MATERIALIZED;    
    object##2 (###object child) = object##Root(child, 2) MATERIALIZED;    
    object##3 (###object child) = object##Root(child, 3) MATERIALIZED;    
    object##4 (###object child) = object##Root(child, 4) MATERIALIZED;    
    object##5 (###object child) = object##Root(child, 5) MATERIALIZED;    
    object##6 (###object child) = object##Root(child, 6) MATERIALIZED;    
END

META defineHierarchyPlainOrder(object, property, prefixName, prefix)
    order###property###object '{hierarchy.order.property.object}' (g) = PARTITION SUM 1 BY parent###object(g) ORDER property###object(g);
    canonicalOrder###property###object '{hierarchy.canonical.order.property.object}' (g) = GROUP CONCAT lpad(STRING[3](order###property###object(parent)), 3, '0') , '.' BY child ORDER DESC level###object###object(child, parent);

    prefixName###object '{hierarchy.prefix.name.object}' (g) = STRING[100](repeat(prefix, INTEGER(level###object(g))-1)) + name###object(g);
END