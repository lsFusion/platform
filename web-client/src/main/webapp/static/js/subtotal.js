// Generated by CoffeeScript 1.12.7
(function() {
  var callWithJQuery,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  callWithJQuery = function(pivotModule) {
    if (typeof exports === "object" && typeof module === "object") {
      return pivotModule(require("jquery"));
    } else if (typeof define === "function" && define.amd) {
      return define(["jquery"], pivotModule);
    } else {
      return pivotModule(jQuery);
    }
  };

  callWithJQuery(function($) {
    var SubtotalPivotData, SubtotalRenderer, aggregatorTemplates, subtotalAggregatorTemplates, usFmtPct;
    SubtotalPivotData = (function(superClass) {
      var processKey;

      extend(SubtotalPivotData, superClass);

      function SubtotalPivotData(input, opts) {
        SubtotalPivotData.__super__.constructor.call(this, input, opts);
      }

      processKey = function(record, totals, keys, attrs, getAggregator) {
        var addKey, attr, flatKey, k, key, len1, ref;
        key = [];
        addKey = false;
        for (k = 0, len1 = attrs.length; k < len1; k++) {
          attr = attrs[k];
          key.push((ref = record[attr]) != null ? ref : "null");
          flatKey = key.join(String.fromCharCode(0));
          if (!totals[flatKey]) {
            totals[flatKey] = getAggregator(key.slice());
            addKey = true;
          }
          totals[flatKey].push(record);
        }
        if (addKey) {
          keys.push(key);
        }
        return key;
      };

      SubtotalPivotData.prototype.processRecord = function(record) {
        var colKey, fColKey, fRowKey, flatColKey, flatRowKey, i, j, k, m, n, ref, results, rowKey;
        rowKey = [];
        colKey = [];
        this.allTotal.push(record);
        rowKey = processKey(record, this.rowTotals, this.rowKeys, this.rowAttrs, (function(_this) {
          return function(key) {
            return _this.aggregator(_this, key, []);
          };
        })(this));
        colKey = processKey(record, this.colTotals, this.colKeys, this.colAttrs, (function(_this) {
          return function(key) {
            return _this.aggregator(_this, [], key);
          };
        })(this));
        m = rowKey.length - 1;
        n = colKey.length - 1;
        if (m < 0 || n < 0) {
          return;
        }
        results = [];
        for (i = k = 0, ref = m; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          fRowKey = rowKey.slice(0, i + 1);
          flatRowKey = fRowKey.join(String.fromCharCode(0));
          if (!this.tree[flatRowKey]) {
            this.tree[flatRowKey] = {};
          }
          results.push((function() {
            var l, ref1, results1;
            results1 = [];
            for (j = l = 0, ref1 = n; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
              fColKey = colKey.slice(0, j + 1);
              flatColKey = fColKey.join(String.fromCharCode(0));
              if (!this.tree[flatRowKey][flatColKey]) {
                this.tree[flatRowKey][flatColKey] = this.aggregator(this, fRowKey, fColKey);
              }
              results1.push(this.tree[flatRowKey][flatColKey].push(record));
            }
            return results1;
          }).call(this));
        }
        return results;
      };

      return SubtotalPivotData;

    })($.pivotUtilities.PivotData);
    $.pivotUtilities.SubtotalPivotData = SubtotalPivotData;
    SubtotalRenderer = function(pivotData, opts) {
      var addClass, adjustColAxisHeader, adjustRowAxisHeader, allTotal, arrowCollapsed, arrowExpanded, buildAxisHeaders, buildColAxisHeader, buildColHeader, buildColTotals, buildColTotalsHeader, buildGrandTotal, buildRowAxisHeader, buildRowHeader, buildRowTotalsHeader, buildValues, classColCollapsed, classColExpanded, classColHide, classColShow, classCollapsed, classExpanded, classRowCollapsed, classRowExpanded, classRowHide, classRowShow, clickStatusCollapsed, clickStatusExpanded, colAttrs, colKeys, colTotals, collapseChildCol, collapseChildRow, collapseCol, collapseColAxis, collapseColAxisHeaders, collapseHiddenColSubtotal, collapseRow, collapseRowAxis, collapseRowAxisHeaders, collapseShowColSubtotal, collapseShowRowSubtotal, createElement, curGroupLength, defaults, executeAggregatorCellRender, expandAxis, expandChildCol, expandChildRow, expandCol, expandHideColSubtotal, expandHideRowSubtotal, expandRow, expandShowColSubtotal, expandShowRowSubtotal, firstIndexInGroup, getColHeaderText, getTableEventHandlers, hasClass, hideChildCol, hideChildRow, i, lastIndexInSomeGroup, longestGroupLength, main, processKeys, processRowKeys, removeClass, replaceClass, rowAttrs, rowKeys, rowTotals, setAttributes, showChildCol, showChildRow, subtotalIsEnabled, tree;
      defaults = {
        table: {
          clickCallback: null
        },
        localeStrings: {
          totals: "Totals",
          subtotalOf: "Subtotal of"
        },
        arrowCollapsed: "\u25B6",
        arrowExpanded: "\u25E2",
        rowSubtotalDisplay: {
          displayOnTop: true,
          collapseAt: 99999,
          hideOnExpand: false,
          disableExpandCollapse: false
        },
        colSubtotalDisplay: {
          displayOnTop: true,
          collapseAt: 99999,
          hideOnExpand: false,
          disableExpandCollapse: false
        }
      };
      opts = $.extend(true, {}, defaults, opts);
      if (typeof opts.rowSubtotalDisplay.collapseAt !== 'undefined' && opts.collapseRowsAt !== null) {
        opts.rowSubtotalDisplay.collapseAt = opts.collapseRowsAt;
      }
      if (opts.rowSubtotalDisplay.splitPositions == null) {
        opts.rowSubtotalDisplay.splitPositions = (function() {
          var k, ref, results;
          results = [];
          for (i = k = 0, ref = pivotData.rowAttrs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            results.push(i);
          }
          return results;
        })();
      }
      if (typeof opts.colSubtotalDisplay.collapseAt !== 'undefined' && opts.collapseColsAt !== null) {
        opts.colSubtotalDisplay.collapseAt = opts.collapseColsAt;
      }
      if (opts.colSubtotalDisplay.splitPositions == null) {
        opts.colSubtotalDisplay.splitPositions = (function() {
          var k, ref, results;
          results = [];
          for (i = k = 0, ref = pivotData.colAttrs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            results.push(i);
          }
          return results;
        })();
      }
      colAttrs = pivotData.colAttrs;
      rowAttrs = pivotData.rowAttrs;
      rowKeys = pivotData.getRowKeys();
      colKeys = pivotData.getColKeys();
      tree = pivotData.tree;
      rowTotals = pivotData.rowTotals;
      colTotals = pivotData.colTotals;
      allTotal = pivotData.allTotal;
      classRowHide = "rowhide";
      classRowShow = "rowshow";
      classColHide = "colhide";
      classColShow = "colshow";
      clickStatusExpanded = "expanded";
      clickStatusCollapsed = "collapsed";
      classExpanded = "expanded";
      classCollapsed = "collapsed";
      classRowExpanded = "rowexpanded";
      classRowCollapsed = "rowcollapsed";
      classColExpanded = "colexpanded";
      classColCollapsed = "colcollapsed";
      arrowExpanded = opts.arrowExpanded;
      arrowCollapsed = opts.arrowCollapsed;
      hasClass = function(element, className) {
        var regExp;
        regExp = new RegExp("(?:^|\\s)" + className + "(?!\\S)", "g");
        return element.className.match(regExp) !== null;
      };
      removeClass = function(element, className) {
        var k, len1, name, ref, regExp, results;
        ref = className.split(" ");
        results = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          name = ref[k];
          regExp = new RegExp("(?:^|\\s)" + name + "(?!\\S)", "g");
          results.push(element.className = element.className.replace(regExp, ''));
        }
        return results;
      };
      addClass = function(element, className) {
        var k, len1, name, ref, results;
        ref = className.split(" ");
        results = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          name = ref[k];
          if (!hasClass(element, name)) {
            results.push(element.className += " " + name);
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      replaceClass = function(element, replaceClassName, byClassName) {
        removeClass(element, replaceClassName);
        return addClass(element, byClassName);
      };
      executeAggregatorCellRender = function(aggregator, td, val) {
        if (aggregator.cellRenderer != null) {
          return aggregator.cellRender(td, val, aggregator.property());
        } else {
          return td.textContent = aggregator.format(val);
        }
      };
      createElement = function(elementType, className, textContent, attributes, eventHandlers) {
        var attr, e, event, handler, val;
        e = document.createElement(elementType);
        if (className != null) {
          e.className = className;
        }
        if (textContent != null) {
          e.textContent = textContent;
        }
        if (attributes != null) {
          for (attr in attributes) {
            if (!hasProp.call(attributes, attr)) continue;
            val = attributes[attr];
            e.setAttribute(attr, val);
          }
        }
        if (eventHandlers != null) {
          for (event in eventHandlers) {
            if (!hasProp.call(eventHandlers, event)) continue;
            handler = eventHandlers[event];
            e.addEventListener(event, handler);
          }
        }
        return e;
      };
      setAttributes = function(e, attrs) {
        var a, results, v;
        results = [];
        for (a in attrs) {
          if (!hasProp.call(attrs, a)) continue;
          v = attrs[a];
          results.push(e.setAttribute(a, v));
        }
        return results;
      };
      processKeys = function(keysArr, className, opts) {
        var headers, lastIdx, row;
        lastIdx = keysArr[0].length - 1;
        headers = {
          children: []
        };
        row = 0;
        keysArr.reduce((function(_this) {
          return function(val0, k0) {
            var col;
            col = 0;
            k0.reduce(function(acc, curVal, curIdx, arr) {
              var k, key, node, ref;
              if (!acc[curVal]) {
                key = k0.slice(0, col + 1);
                acc[curVal] = {
                  row: row,
                  col: col,
                  descendants: 0,
                  children: [],
                  text: curVal,
                  key: key,
                  flatKey: key.join(String.fromCharCode(0)),
                  firstLeaf: null,
                  leaves: 0,
                  parent: col !== 0 ? acc : null,
                  th: createElement("th", className, curVal),
                  childrenSpan: 0
                };
                acc.children.push(curVal);
              }
              if (col > 0) {
                acc.descendants++;
              }
              col++;
              if (curIdx === lastIdx) {
                node = headers;
                for (i = k = 0, ref = lastIdx - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
                  if (!(lastIdx > 0)) {
                    continue;
                  }
                  node[k0[i]].leaves++;
                  if (!node[k0[i]].firstLeaf) {
                    node[k0[i]].firstLeaf = acc[curVal];
                  }
                  node = node[k0[i]];
                }
                return headers;
              }
              return acc[curVal];
            }, headers);
            row++;
            return headers;
          };
        })(this), headers);
        return headers;
      };
      processRowKeys = function(keysArr, className, opts) {
        var headers, lastIdx, row, splitPositions;
        splitPositions = opts.rowSubtotalDisplay.splitPositions;
        lastIdx = keysArr[0].length - 1;
        headers = {
          children: []
        };
        row = 0;
        keysArr.reduce((function(_this) {
          return function(val0, k0) {
            var col, curElement;
            col = 0;
            curElement = [];
            k0.reduce(function(acc, curVal, curIdx, arr) {
              var flatCurElement, key, node;
              curElement.push(curVal);
              if (splitPositions.indexOf(curIdx) !== -1) {
                flatCurElement = curElement.join(String.fromCharCode(0));
                if (!acc[flatCurElement]) {
                  key = k0.slice(0, curIdx + 1);
                  acc[flatCurElement] = {
                    row: row,
                    col: col,
                    descendants: 0,
                    children: [],
                    values: curElement,
                    text: flatCurElement,
                    key: key,
                    flatKey: key.join(String.fromCharCode(0)),
                    firstLeaf: null,
                    leaves: 0,
                    parent: col !== 0 ? acc : null,
                    childrenSpan: 0
                  };
                  acc.children.push(flatCurElement);
                }
                if (col > 0) {
                  acc.descendants++;
                }
                col++;
                if (curIdx === lastIdx) {
                  node = acc;
                  while (node != null) {
                    node.leaves++;
                    if (!node.firstLeaf) {
                      node.firstLeaf = acc[flatCurElement];
                    }
                    node = node.parent;
                  }
                  return headers;
                }
                curElement = [];
                return acc[flatCurElement];
              } else {
                return acc;
              }
            }, headers);
            row++;
            return headers;
          };
        })(this), headers);
        return headers;
      };
      buildColAxisHeader = function(axisHeaders, index, attrs, opts, disabledArrow) {
        var ah, arrow, hClass;
        ah = {
          text: attrs[index],
          expandedCount: 0,
          expandables: 0,
          attrHeaders: [],
          clickStatus: clickStatusExpanded,
          onClick: collapseColAxis
        };
        arrow = arrowExpanded + " ";
        hClass = classExpanded;
        if (index >= opts.collapseAt) {
          arrow = arrowCollapsed + " ";
          hClass = classCollapsed;
          ah.clickStatus = clickStatusCollapsed;
          ah.onClick = expandAxis;
        }
        if (disabledArrow) {
          arrow = "";
        }
        ah.th = createElement("th", "pvtAxisLabel " + hClass, "" + arrow + ah.text);
        if (!disabledArrow) {
          ah.th.onclick = function(event) {
            event = event || window.event;
            return ah.onClick(axisHeaders, index, attrs, opts);
          };
        }
        axisHeaders.ah.push(ah);
        return ah;
      };
      buildRowAxisHeader = function(axisHeaders, index, attrs, opts, disabledArrow) {
        var ah, arrow, firstIndex, flatText, hClass, k, ref, ref1, th;
        ah = {
          text: "",
          values: [],
          expandedCount: 0,
          expandables: 0,
          attrHeaders: [],
          clickStatus: clickStatusExpanded,
          onClick: collapseRowAxis,
          ths: []
        };
        arrow = arrowExpanded + " ";
        hClass = classExpanded;
        if (index >= opts.collapseAt) {
          arrow = arrowCollapsed + " ";
          hClass = classCollapsed;
          ah.clickStatus = clickStatusCollapsed;
          ah.onClick = expandAxis;
        }
        if (disabledArrow) {
          arrow = "";
        }
        firstIndex = firstIndexInGroup(opts.splitPositions, index);
        for (i = k = ref = firstIndex, ref1 = opts.splitPositions[index]; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          if (i === firstIndex) {
            th = createElement("th", "pvtAxisLabel " + hClass, "" + arrow + attrs[i]);
          } else {
            th = createElement("th", "pvtAxisLabel " + hClass, "" + attrs[i]);
          }
          ah.ths.push(th);
          ah.values.push(attrs[i]);
        }
        flatText = attrs.slice(firstIndex, +opts.splitPositions[index] + 1 || 9e9).join(String.fromCharCode(0));
        ah.text = flatText;
        if (!disabledArrow) {
          ah.ths[0].onclick = function(event) {
            event = event || window.event;
            return ah.onClick(axisHeaders, index, attrs, opts);
          };
        }
        axisHeaders.ah.push(ah);
        return ah;
      };
      buildAxisHeaders = function(thead, rowAttrs, colAttrs, opts) {
        var ah, colAxisHeaders, colsNumber, curCol, curGroup, disabled, firstIndex, groupLen, k, l, len1, longestRowGroupLength, ref, ref1, row, rowAxisHeaders, rowGroupsNumber, rowSplits, rowsNumber, th, tr, trs;
        colAxisHeaders = {
          collapseAttrHeader: collapseCol,
          expandAttrHeader: expandCol,
          ah: []
        };
        rowAxisHeaders = {
          collapseAttrHeader: collapseRow,
          expandAttrHeader: expandRow,
          ah: []
        };
        rowSplits = opts.rowSubtotalDisplay.splitPositions;
        rowGroupsNumber = rowSplits.length;
        longestRowGroupLength = longestGroupLength(rowSplits);
        rowsNumber = Math.max(rowGroupsNumber, colAttrs.length);
        colsNumber = longestRowGroupLength + 1;
        trs = [];
        for (row = k = 0, ref = rowsNumber; 0 <= ref ? k < ref : k > ref; row = 0 <= ref ? ++k : --k) {
          tr = createElement("tr");
          trs.push(tr);
          thead.appendChild(tr);
          if (row + rowGroupsNumber >= rowsNumber) {
            curGroup = row - (rowsNumber - rowGroupsNumber);
            disabled = curGroup === rowGroupsNumber - 1;
            ah = buildRowAxisHeader(rowAxisHeaders, curGroup, rowAttrs, opts.rowSubtotalDisplay, disabled);
            ref1 = ah.ths;
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              th = ref1[l];
              tr.appendChild(th);
            }
            ah.tr = tr;
            firstIndex = firstIndexInGroup(rowSplits, curGroup);
            groupLen = rowSplits[curGroup] - firstIndex + 1;
            if (groupLen < longestRowGroupLength) {
              tr.appendChild(createElement("th", null, null, {
                colspan: longestRowGroupLength - groupLen
              }));
            }
          } else if (row === 0 && longestRowGroupLength > 0) {
            tr.appendChild(createElement("th", null, null, {
              colspan: longestRowGroupLength,
              rowspan: rowsNumber - rowGroupsNumber
            }));
          }
          if (row + colAttrs.length >= rowsNumber) {
            curCol = row - (rowsNumber - colAttrs.length);
            disabled = !subtotalIsEnabled(opts.colSubtotalDisplay, curCol);
            ah = buildColAxisHeader(colAxisHeaders, curCol, colAttrs, opts.colSubtotalDisplay, disabled);
            tr.appendChild(ah.th);
            ah.tr = tr;
          } else if (row === 0 && colAttrs.length > 0) {
            tr.appendChild(createElement("th", null, null, {
              rowspan: rowsNumber - colAttrs.length
            }));
          }
        }
        return [colAxisHeaders, rowAxisHeaders];
      };
      firstIndexInGroup = function(splitPositions, groupIndex) {
        if (groupIndex === 0) {
          return 0;
        } else {
          return splitPositions[groupIndex - 1] + 1;
        }
      };
      longestGroupLength = function(splitPositions) {
        var k, len, len1, pos, prev;
        len = 0;
        for (i = k = 0, len1 = splitPositions.length; k < len1; i = ++k) {
          pos = splitPositions[i];
          prev = i === 0 ? -1 : splitPositions[i - 1];
          len = Math.max(len, pos - prev);
        }
        return len;
      };
      curGroupLength = function(splitPositions, index) {
        var firstIndex, k, len1, pos;
        for (i = k = 0, len1 = splitPositions.length; k < len1; i = ++k) {
          pos = splitPositions[i];
          firstIndex = firstIndexInGroup(splitPositions, i);
          if (first <= index && pos >= index) {
            return pos - firstIndex + 1;
          }
        }
      };
      subtotalIsEnabled = function(opts, index) {
        var splitPositions;
        splitPositions = opts.splitPositions;
        if (index === splitPositions[splitPositions.length - 1] || opts.disableExpandCollapse || opts.disableSubtotal) {
          return false;
        }
        return splitPositions.indexOf(index) !== -1;
      };
      lastIndexInSomeGroup = function(splitPositions, position) {
        return splitPositions.indexOf(position) !== -1;
      };
      getColHeaderText = function(h, attrs, opts) {
        var arrow;
        arrow = " " + arrowExpanded + " ";
        if ((!subtotalIsEnabled(opts, h.col)) || h.children.length === 0) {
          arrow = "";
        }
        return "" + arrow + h.text;
      };
      buildColHeader = function(axisHeaders, attrHeaders, h, rowAttrs, colAttrs, node, opts) {
        var ah, chKey, k, len1, ref, ref1;
        ref = h.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          buildColHeader(axisHeaders, attrHeaders, h[chKey], rowAttrs, colAttrs, node, opts);
        }
        ah = axisHeaders.ah[h.col];
        ah.attrHeaders.push(h);
        h.node = node.counter;
        h.onClick = collapseCol;
        addClass(h.th, classColShow + " col" + h.row + " colcol" + h.col + " " + classColExpanded);
        h.th.setAttribute("data-colnode", h.node);
        if (h.children.length !== 0) {
          h.th.colSpan = h.childrenSpan;
        }
        h.th.textContent = getColHeaderText(h, colAttrs, opts.colSubtotalDisplay);
        if (h.children.length !== 0 && subtotalIsEnabled(opts.colSubtotalDisplay, h.col)) {
          ah.expandables++;
          ah.expandedCount += 1;
          if (!opts.colSubtotalDisplay.hideOnExpand) {
            h.th.colSpan++;
          }
          if (!opts.colSubtotalDisplay.disableExpandCollapse) {
            h.th.onclick = function(event) {
              event = event || window.event;
              return h.onClick(axisHeaders, h, opts.colSubtotalDisplay);
            };
          }
          h.sTh = createElement("th", "pvtColLabelFiller " + classColShow + " col" + h.row + " colcol" + h.col + " " + classColExpanded);
          h.sTh.setAttribute("data-colnode", h.node);
          h.sTh.rowSpan = colAttrs.length - h.col;
          if (opts.colSubtotalDisplay.hideOnExpand) {
            replaceClass(h.sTh, classColShow, classColHide);
          }
          h[h.children[0]].tr.appendChild(h.sTh);
        }
        if ((ref1 = h.parent) != null) {
          ref1.childrenSpan += h.th.colSpan;
        }
        h.clickStatus = clickStatusExpanded;
        ah.tr.appendChild(h.th);
        h.tr = ah.tr;
        attrHeaders.push(h);
        return node.counter++;
      };
      buildRowTotalsHeader = function(tr, span) {
        var th;
        th = createElement("th", "pvtTotalLabel rowTotal", opts.localeStrings.totals, {
          rowspan: span
        });
        return tr.appendChild(th);
      };
      buildRowHeader = function(tbody, axisHeaders, attrHeaders, h, rowAttrs, colAttrs, node, opts) {
        var ah, arrow, chKey, colSpan, firstChild, k, l, len1, ref, ref1, ref2, splitPositions, th;
        ref = h.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          buildRowHeader(tbody, axisHeaders, attrHeaders, h[chKey], rowAttrs, colAttrs, node, opts);
        }
        splitPositions = opts.rowSubtotalDisplay.splitPositions;
        ah = axisHeaders.ah[h.col];
        ah.attrHeaders.push(h);
        h.node = node.counter;
        h.onClick = collapseRow;
        if (h.children.length !== 0) {
          firstChild = h[h.children[0]];
        }
        colSpan = 1 + longestGroupLength(splitPositions) - h.values.length;
        if (colAttrs.length > 0) {
          colSpan += 1;
        }
        h.tr = createElement("tr", "row" + h.row);
        if (h.children.length === 0) {
          tbody.appendChild(h.tr);
        } else {
          tbody.insertBefore(h.tr, firstChild.tr);
        }
        h.ths = [];
        for (i = l = 0, ref1 = h.values.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
          th = createElement("th", "pvtRowLabel", h.values[i]);
          addClass(th, classRowShow + " row" + h.row + " rowcol" + h.col + " " + classRowExpanded);
          th.setAttribute("data-rownode", h.node);
          if (i + 1 === h.values.length) {
            th.colSpan = colSpan;
          }
          arrow = " " + arrowExpanded + " ";
          if (i > 0 || h.children.length === 0) {
            arrow = "";
          }
          th.textContent = "" + arrow + h.values[i];
          h.ths.push(th);
          h.tr.appendChild(th);
        }
        if (h.children.length !== 0) {
          ++ah.expandedCount;
          ++ah.expandables;
          if (!opts.rowSubtotalDisplay.disableExpandCollapse) {
            h.ths[0].onclick = function(event) {
              event = event || window.event;
              return h.onClick(axisHeaders, h, opts.rowSubtotalDisplay);
            };
          }
          if (!opts.rowSubtotalDisplay.displayOnTop) {
            h.sTr = createElement("tr", "row" + h.row);
            tbody.appendChild(h.sTr);
          }
        }
        if ((ref2 = h.parent) != null) {
          ref2.childrenSpan += 1;
        }
        h.clickStatus = clickStatusExpanded;
        attrHeaders.push(h);
        return node.counter++;
      };
      getTableEventHandlers = function(value, rowKey, colKey, rowAttrs, colAttrs, opts) {
        var attr, event, eventHandlers, filters, handler, ref, ref1;
        if (!((ref = opts.table) != null ? ref.eventHandlers : void 0)) {
          return;
        }
        eventHandlers = {};
        ref1 = opts.table.eventHandlers;
        for (event in ref1) {
          if (!hasProp.call(ref1, event)) continue;
          handler = ref1[event];
          filters = {};
          for (i in colAttrs) {
            if (!hasProp.call(colAttrs, i)) continue;
            attr = colAttrs[i];
            if (colKey[i] != null) {
              filters[attr] = colKey[i];
            }
          }
          for (i in rowAttrs) {
            if (!hasProp.call(rowAttrs, i)) continue;
            attr = rowAttrs[i];
            if (rowKey[i] != null) {
              filters[attr] = rowKey[i];
            }
          }
          eventHandlers[event] = function(e) {
            return handler(e, value, filters, pivotData);
          };
        }
        return eventHandlers;
      };
      buildValues = function(tbody, colAttrHeaders, rowAttrHeaders, rowAttrs, colAttrs, opts) {
        var aggregator, ch, cls, k, l, len1, len2, rCls, ref, results, rh, td, totalAggregator, tr, val;
        results = [];
        for (k = 0, len1 = rowAttrHeaders.length; k < len1; k++) {
          rh = rowAttrHeaders[k];
          rCls = "pvtVal row" + rh.row + " rowcol" + rh.col + " " + classRowExpanded;
          if (rh.children.length > 0) {
            rCls += " pvtRowSubtotal";
            rCls += opts.rowSubtotalDisplay.hideOnExpand ? " " + classRowHide : "  " + classRowShow;
          } else {
            rCls += " " + classRowShow;
          }
          tr = rh.sTr ? rh.sTr : rh.tr;
          for (l = 0, len2 = colAttrHeaders.length; l < len2; l++) {
            ch = colAttrHeaders[l];
            if (!(ch.col === colAttrs.length - 1 || (ch.children.length !== 0 && subtotalIsEnabled(opts.colSubtotalDisplay, ch.col)))) {
              continue;
            }
            aggregator = (ref = tree[rh.flatKey][ch.flatKey]) != null ? ref : {
              cellRender: (function() {}),
              property: (function() {
                return null;
              }),
              value: (function() {
                return null;
              }),
              format: function() {
                return "";
              }
            };
            val = aggregator.value();
            cls = " " + rCls + " col" + ch.row + " colcol" + ch.col + " " + classColExpanded;
            if (ch.children.length > 0) {
              cls += " pvtColSubtotal";
              cls += opts.colSubtotalDisplay.hideOnExpand ? " " + classColHide : " " + classColShow;
            } else {
              cls += " " + classColShow;
            }
            td = createElement("td", cls, "", {
              "data-value": val,
              "data-rownode": rh.node,
              "data-colnode": ch.node
            }, getTableEventHandlers(val, rh.key, ch.key, rowAttrs, colAttrs, opts));
            tr.appendChild(td);
            executeAggregatorCellRender(aggregator, td, val);
          }
          totalAggregator = rowTotals[rh.flatKey];
          val = totalAggregator.value();
          td = createElement("td", "pvtTotal rowTotal " + rCls, "", {
            "data-value": val,
            "data-row": "row" + rh.row,
            "data-rowcol": "col" + rh.col,
            "data-rownode": rh.node
          }, getTableEventHandlers(val, rh.key, [], rowAttrs, colAttrs, opts));
          tr.appendChild(td);
          results.push(executeAggregatorCellRender(totalAggregator, td, val));
        }
        return results;
      };
      buildColTotalsHeader = function(rowHeadersColumns, colAttrs) {
        var colspan, th, tr;
        tr = createElement("tr");
        colspan = rowHeadersColumns + (colAttrs.length === 0 ? 0 : 1);
        th = createElement("th", "pvtTotalLabel colTotal", opts.localeStrings.totals, {
          colspan: colspan
        });
        tr.appendChild(th);
        return tr;
      };
      buildColTotals = function(tr, attrHeaders, rowAttrs, colAttrs, opts) {
        var clsNames, h, k, len1, results, td, totalAggregator, val;
        results = [];
        for (k = 0, len1 = attrHeaders.length; k < len1; k++) {
          h = attrHeaders[k];
          if (!(h.col === colAttrs.length - 1 || (h.children.length !== 0 && subtotalIsEnabled(opts.colSubtotalDisplay, h.col)))) {
            continue;
          }
          clsNames = "pvtVal pvtTotal colTotal " + classColExpanded + " col" + h.row + " colcol" + h.col;
          if (h.children.length !== 0) {
            clsNames += " pvtColSubtotal";
            clsNames += opts.colSubtotalDisplay.hideOnExpand ? " " + classColHide : " " + classColShow;
          } else {
            clsNames += " " + classColShow;
          }
          totalAggregator = colTotals[h.flatKey];
          val = totalAggregator.value();
          td = createElement("td", clsNames, "", {
            "data-value": val,
            "data-for": "col" + h.col,
            "data-colnode": "" + h.node
          }, getTableEventHandlers(val, [], h.key, rowAttrs, colAttrs, opts));
          tr.appendChild(td);
          results.push(executeAggregatorCellRender(totalAggregator, td, val));
        }
        return results;
      };
      buildGrandTotal = function(tbody, tr, rowAttrs, colAttrs, opts) {
        var td, totalAggregator, val;
        totalAggregator = allTotal;
        val = totalAggregator.value();
        td = createElement("td", "pvtGrandTotal", "", {
          "data-value": val
        }, getTableEventHandlers(val, [], [], rowAttrs, colAttrs, opts));
        tr.appendChild(td);
        tbody.appendChild(tr);
        return executeAggregatorCellRender(totalAggregator, td, val);
      };
      collapseColAxisHeaders = function(axisHeaders, col, opts) {
        var ah, k, ref, ref1, results;
        results = [];
        for (i = k = ref = col, ref1 = axisHeaders.ah.length - 2; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          if (subtotalIsEnabled(opts, i)) {
            ah = axisHeaders.ah[i];
            replaceClass(ah.th, classExpanded, classCollapsed);
            ah.th.textContent = " " + arrowCollapsed + " " + ah.text;
            ah.clickStatus = clickStatusCollapsed;
            results.push(ah.onClick = expandAxis);
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      collapseRowAxisHeaders = function(axisHeaders, row, opts) {
        var ah, k, l, len1, ref, ref1, ref2, results, th;
        results = [];
        for (i = k = ref = row, ref1 = axisHeaders.ah.length - 2; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          ah = axisHeaders.ah[i];
          ref2 = ah.ths;
          for (l = 0, len1 = ref2.length; l < len1; l++) {
            th = ref2[l];
            replaceClass(th, classExpanded, classCollapsed);
          }
          ah.ths[0].textContent = " " + arrowCollapsed + " " + ah.values[0];
          ah.clickStatus = clickStatusCollapsed;
          results.push(ah.onClick = expandAxis);
        }
        return results;
      };
      adjustColAxisHeader = function(axisHeaders, col, opts) {
        var ah;
        ah = axisHeaders.ah[col];
        if (ah.expandedCount === 0) {
          return collapseColAxisHeaders(axisHeaders, col, opts);
        } else if (ah.expandedCount === ah.expandables) {
          replaceClass(ah.th, classCollapsed, classExpanded);
          ah.th.textContent = " " + arrowExpanded + " " + ah.text;
          ah.clickStatus = clickStatusExpanded;
          return ah.onClick = collapseColAxis;
        }
      };
      adjustRowAxisHeader = function(axisHeaders, row, opts) {
        var ah, k, len1, ref, th;
        ah = axisHeaders.ah[row];
        if (ah.expandedCount === 0) {
          return collapseRowAxisHeaders(axisHeaders, row, opts);
        } else if (ah.expandedCount === ah.expandables) {
          ref = ah.ths;
          for (k = 0, len1 = ref.length; k < len1; k++) {
            th = ref[k];
            replaceClass(th, classCollapsed, classExpanded);
          }
          ah.ths[0].textContent = " " + arrowExpanded + " " + ah.values[0];
          ah.clickStatus = clickStatusExpanded;
          return ah.onClick = collapseRowAxis;
        }
      };
      hideChildCol = function(ch) {
        return $(ch.th).closest('table.pvtTable').find("tbody tr td[data-colnode=\"" + ch.node + "\"], th[data-colnode=\"" + ch.node + "\"]").removeClass(classColShow).addClass(classColHide);
      };
      collapseHiddenColSubtotal = function(h, opts) {
        $(h.th).closest('table.pvtTable').find("tbody tr td[data-colnode=\"" + h.node + "\"], th[data-colnode=\"" + h.node + "\"]").removeClass(classColExpanded).addClass(classColCollapsed);
        if (h.children.length !== 0) {
          h.th.textContent = " " + arrowCollapsed + " " + h.text;
        }
        return h.th.colSpan = 1;
      };
      collapseShowColSubtotal = function(h, opts) {
        $(h.th).closest('table.pvtTable').find("tbody tr td[data-colnode=\"" + h.node + "\"], th[data-colnode=\"" + h.node + "\"]").removeClass(classColExpanded).addClass(classColCollapsed).removeClass(classColHide).addClass(classColShow);
        if (h.children.length !== 0) {
          h.th.textContent = " " + arrowCollapsed + " " + h.text;
        }
        return h.th.colSpan = 1;
      };
      collapseChildCol = function(ch, h) {
        var chKey, k, len1, ref;
        ref = ch.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          if (hasClass(ch[chKey].th, classColShow)) {
            collapseChildCol(ch[chKey], h);
          }
        }
        return hideChildCol(ch);
      };
      collapseCol = function(axisHeaders, h, opts) {
        var chKey, colSpan, k, len1, p, ref;
        colSpan = h.th.colSpan - 1;
        ref = h.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          if (hasClass(h[chKey].th, classColShow)) {
            collapseChildCol(h[chKey], h);
          }
        }
        if (subtotalIsEnabled(opts, h.col)) {
          if (hasClass(h.th, classColHide)) {
            collapseHiddenColSubtotal(h, opts);
          } else {
            collapseShowColSubtotal(h, opts);
          }
        }
        p = h.parent;
        while (p) {
          p.th.colSpan -= colSpan;
          p = p.parent;
        }
        h.clickStatus = clickStatusCollapsed;
        h.onClick = expandCol;
        axisHeaders.ah[h.col].expandedCount--;
        return adjustColAxisHeader(axisHeaders, h.col, opts);
      };
      showChildCol = function(ch) {
        return $(ch.th).closest('table.pvtTable').find("tbody tr td[data-colnode=\"" + ch.node + "\"], th[data-colnode=\"" + ch.node + "\"]").removeClass(classColHide).addClass(classColShow);
      };
      expandHideColSubtotal = function(h) {
        $(h.th).closest('table.pvtTable').find("tbody tr td[data-colnode=\"" + h.node + "\"], th[data-colnode=\"" + h.node + "\"]").removeClass(classColCollapsed + " " + classColShow).addClass(classColExpanded + " " + classColHide);
        replaceClass(h.th, classColHide, classColShow);
        return h.th.textContent = " " + arrowExpanded + " " + h.text;
      };
      expandShowColSubtotal = function(h) {
        $(h.th).closest('table.pvtTable').find("tbody tr td[data-colnode=\"" + h.node + "\"], th[data-colnode=\"" + h.node + "\"]").removeClass(classColCollapsed + " " + classColHide).addClass(classColExpanded + " " + classColShow);
        h.th.colSpan++;
        return h.th.textContent = " " + arrowExpanded + " " + h.text;
      };
      expandChildCol = function(ch, opts) {
        var chKey, k, len1, ref, results;
        if (ch.children.length !== 0 && opts.hideOnExpand && ch.clickStatus === clickStatusExpanded) {
          replaceClass(ch.th, classColHide, classColShow);
        } else {
          showChildCol(ch);
        }
        if (ch.sTh && ch.clickStatus === clickStatusExpanded && opts.hideOnExpand) {
          replaceClass(ch.sTh, classColShow, classColHide);
        }
        if (ch.clickStatus === clickStatusExpanded || !subtotalIsEnabled(opts, ch.col)) {
          ref = ch.children;
          results = [];
          for (k = 0, len1 = ref.length; k < len1; k++) {
            chKey = ref[k];
            results.push(expandChildCol(ch[chKey], opts));
          }
          return results;
        }
      };
      expandCol = function(axisHeaders, h, opts) {
        var ch, chKey, colSpan, k, len1, p, ref;
        if (h.clickStatus === clickStatusExpanded) {
          adjustColAxisHeader(axisHeaders, h.col, opts);
          return;
        }
        colSpan = 0;
        ref = h.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          ch = h[chKey];
          expandChildCol(ch, opts);
          colSpan += ch.th.colSpan;
        }
        h.th.colSpan = colSpan;
        if (subtotalIsEnabled(opts, h.col)) {
          if (opts.hideOnExpand) {
            expandHideColSubtotal(h);
            --colSpan;
          } else {
            expandShowColSubtotal(h);
          }
        }
        p = h.parent;
        while (p) {
          p.th.colSpan += colSpan;
          p = p.parent;
        }
        h.clickStatus = clickStatusExpanded;
        h.onClick = collapseCol;
        axisHeaders.ah[h.col].expandedCount++;
        return adjustColAxisHeader(axisHeaders, h.col, opts);
      };
      hideChildRow = function(ch, opts) {
        var cell, k, l, len1, len2, ref, ref1, results;
        ref = ch.tr.querySelectorAll("th, td");
        for (k = 0, len1 = ref.length; k < len1; k++) {
          cell = ref[k];
          replaceClass(cell, classRowShow, classRowHide);
        }
        if (ch.sTr) {
          ref1 = ch.sTr.querySelectorAll("th, td");
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            cell = ref1[l];
            results.push(replaceClass(cell, classRowShow, classRowHide));
          }
          return results;
        }
      };
      collapseShowRowSubtotal = function(h, opts) {
        var cell, k, l, len1, len2, ref, ref1, results;
        h.ths[0].textContent = " " + arrowCollapsed + " " + h.values[0];
        ref = h.tr.querySelectorAll("th, td");
        for (k = 0, len1 = ref.length; k < len1; k++) {
          cell = ref[k];
          removeClass(cell, classRowExpanded + " " + classRowHide);
          addClass(cell, classRowCollapsed + " " + classRowShow);
        }
        if (h.sTr) {
          ref1 = h.sTr.querySelectorAll("th, td");
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            cell = ref1[l];
            removeClass(cell, classRowExpanded + " " + classRowHide);
            results.push(addClass(cell, classRowCollapsed + " " + classRowShow));
          }
          return results;
        }
      };
      collapseChildRow = function(ch, h, opts) {
        var chKey, k, len1, ref;
        ref = ch.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          collapseChildRow(ch[chKey], h, opts);
        }
        return hideChildRow(ch, opts);
      };
      collapseRow = function(axisHeaders, h, opts) {
        var chKey, k, len1, ref;
        ref = h.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          collapseChildRow(h[chKey], h, opts);
        }
        collapseShowRowSubtotal(h, opts);
        h.clickStatus = clickStatusCollapsed;
        h.onClick = expandRow;
        axisHeaders.ah[h.col].expandedCount--;
        return adjustRowAxisHeader(axisHeaders, h.col, opts);
      };
      showChildRow = function(ch, opts) {
        var cell, k, l, len1, len2, ref, ref1, results;
        ref = ch.tr.querySelectorAll("th, td");
        for (k = 0, len1 = ref.length; k < len1; k++) {
          cell = ref[k];
          replaceClass(cell, classRowHide, classRowShow);
        }
        if (ch.sTr) {
          ref1 = ch.sTr.querySelectorAll("th, td");
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            cell = ref1[l];
            results.push(replaceClass(cell, classRowHide, classRowShow));
          }
          return results;
        }
      };
      expandShowRowSubtotal = function(h, opts) {
        var cell, k, l, len1, len2, ref, ref1, results;
        h.ths[0].textContent = " " + arrowExpanded + " " + h.values[0];
        ref = h.tr.querySelectorAll("th, td");
        for (k = 0, len1 = ref.length; k < len1; k++) {
          cell = ref[k];
          removeClass(cell, classRowCollapsed + " " + classRowHide);
          addClass(cell, classRowExpanded + " " + classRowShow);
        }
        if (h.sTr) {
          ref1 = h.sTr.querySelectorAll("th, td");
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            cell = ref1[l];
            removeClass(cell, classRowCollapsed + " " + classRowHide);
            results.push(addClass(cell, classRowExpanded + " " + classRowShow));
          }
          return results;
        }
      };
      expandHideRowSubtotal = function(h, opts) {
        var cell, k, l, len1, len2, len3, o, ref, ref1, ref2, results, th;
        h.ths[0].textContent = " " + arrowExpanded + " " + h.values[0];
        ref = h.tr.querySelectorAll("th, td");
        for (k = 0, len1 = ref.length; k < len1; k++) {
          cell = ref[k];
          removeClass(cell, classRowCollapsed + " " + classRowShow);
          addClass(cell, classRowExpanded + " " + classRowHide);
        }
        ref1 = h.ths;
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          th = ref1[l];
          removeClass(th, classRowCollapsed + " " + classRowHide);
        }
        addClass(cell, classRowExpanded + " " + classRowShow);
        if (h.sTr) {
          ref2 = h.sTr.querySelectorAll("th, td");
          results = [];
          for (o = 0, len3 = ref2.length; o < len3; o++) {
            cell = ref2[o];
            removeClass(cell, classRowCollapsed + " " + classRowShow);
            results.push(addClass(cell, classRowExpanded + " " + classRowHide));
          }
          return results;
        }
      };
      expandChildRow = function(ch, opts) {
        var chKey, k, l, len1, len2, ref, ref1, results, th;
        if (ch.children.length !== 0 && opts.hideOnExpand && ch.clickStatus === clickStatusExpanded) {
          ref = ch.ths;
          for (k = 0, len1 = ref.length; k < len1; k++) {
            th = ref[k];
            replaceClass(th, classRowHide, classRowShow);
          }
        } else {
          showChildRow(ch, opts);
        }
        if (ch.sTh && ch.clickStatus === clickStatusExpanded && opts.hideOnExpand) {
          replaceClass(ch.sTh, classRowShow, classRowHide);
        }
        if (ch.clickStatus === clickStatusExpanded || !subtotalIsEnabled(opts, ch.col)) {
          ref1 = ch.children;
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            chKey = ref1[l];
            results.push(expandChildRow(ch[chKey], opts));
          }
          return results;
        }
      };
      expandRow = function(axisHeaders, h, opts) {
        var ch, chKey, k, len1, ref;
        if (h.clickStatus === clickStatusExpanded) {
          adjustRowAxisHeader(axisHeaders, h.col, opts);
          return;
        }
        ref = h.children;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          chKey = ref[k];
          ch = h[chKey];
          expandChildRow(ch, opts);
        }
        if (h.children.length !== 0) {
          if (opts.hideOnExpand) {
            expandHideRowSubtotal(h, opts);
          } else {
            expandShowRowSubtotal(h, opts);
          }
        }
        h.clickStatus = clickStatusExpanded;
        h.onClick = collapseRow;
        axisHeaders.ah[h.col].expandedCount++;
        return adjustRowAxisHeader(axisHeaders, h.col, opts);
      };
      collapseColAxis = function(axisHeaders, col, attrs, opts) {
        var h, k, ref, ref1, results;
        results = [];
        for (i = k = ref = attrs.length - 2, ref1 = col; k >= ref1; i = k += -1) {
          results.push((function() {
            var l, len1, ref2, results1;
            ref2 = axisHeaders.ah[i].attrHeaders;
            results1 = [];
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              h = ref2[l];
              if (h.clickStatus === clickStatusExpanded && h.children.length !== 0 && subtotalIsEnabled(opts, i)) {
                results1.push(axisHeaders.collapseAttrHeader(axisHeaders, h, opts));
              }
            }
            return results1;
          })());
        }
        return results;
      };
      collapseRowAxis = function(axisHeaders, row, attrs, opts) {
        var h, k, ref, ref1, results;
        results = [];
        for (i = k = ref = axisHeaders.ah.length - 2, ref1 = row; k >= ref1; i = k += -1) {
          results.push((function() {
            var l, len1, ref2, results1;
            ref2 = axisHeaders.ah[i].attrHeaders;
            results1 = [];
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              h = ref2[l];
              if (h.clickStatus === clickStatusExpanded && h.children.length !== 0) {
                results1.push(axisHeaders.collapseAttrHeader(axisHeaders, h, opts));
              }
            }
            return results1;
          })());
        }
        return results;
      };
      expandAxis = function(axisHeaders, col, attrs, opts) {
        var ah, h, k, ref, results;
        ah = axisHeaders.ah[col];
        results = [];
        for (i = k = 0, ref = col; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          results.push((function() {
            var l, len1, ref1, results1;
            ref1 = axisHeaders.ah[i].attrHeaders;
            results1 = [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              h = ref1[l];
              results1.push(axisHeaders.expandAttrHeader(axisHeaders, h, opts));
            }
            return results1;
          })());
        }
        return results;
      };
      main = function(rowAttrs, rowKeys, colAttrs, colKeys) {
        var chKey, colAttrHeaders, colAxisHeaders, colKeyHeaders, k, l, len1, len2, node, overallSpan, ref, ref1, ref2, resultTable, rowAttrHeaders, rowAttrHeadersCount, rowAxisHeaders, rowKeyHeaders, tbody, thead, tr;
        rowAttrHeaders = [];
        colAttrHeaders = [];
        if (colAttrs.length !== 0 && colKeys.length !== 0) {
          colKeyHeaders = processKeys(colKeys, "pvtColLabel");
        }
        if (rowAttrs.length !== 0 && rowKeys.length !== 0) {
          rowKeyHeaders = processRowKeys(rowKeys, "pvtRowLabel", opts);
        }
        resultTable = createElement("table", "pvtTable", null, {
          style: "display: none;"
        });
        thead = createElement("thead");
        resultTable.appendChild(thead);
        ref = buildAxisHeaders(thead, rowAttrs, colAttrs, opts), colAxisHeaders = ref[0], rowAxisHeaders = ref[1];
        if (colAttrs.length !== 0) {
          node = {
            counter: 0
          };
          overallSpan = 0;
          ref1 = colKeyHeaders.children;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            chKey = ref1[k];
            buildColHeader(colAxisHeaders, colAttrHeaders, colKeyHeaders[chKey], rowAttrs, colAttrs, node, opts);
            overallSpan += colKeyHeaders[chKey].th.colSpan;
          }
          buildRowTotalsHeader(colAxisHeaders.ah[0].tr, colAttrs.length);
          rowAttrHeadersCount = opts.rowSubtotalDisplay.splitPositions.length;
          if (rowAttrHeadersCount > colAttrs.length) {
            rowAxisHeaders.ah[0].tr.appendChild(createElement("th", null, null, {
              colspan: overallSpan + 1,
              rowspan: rowAttrHeadersCount - colAttrs.length
            }));
          }
        }
        tbody = createElement("tbody");
        resultTable.appendChild(tbody);
        if (rowAttrs.length !== 0) {
          if (colAttrs.length === 0) {
            buildRowTotalsHeader(rowAxisHeaders.ah[0].tr, opts.rowSubtotalDisplay.splitPositions.length);
          }
          node = {
            counter: 0
          };
          ref2 = rowKeyHeaders.children;
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            chKey = ref2[l];
            buildRowHeader(tbody, rowAxisHeaders, rowAttrHeaders, rowKeyHeaders[chKey], rowAttrs, colAttrs, node, opts);
          }
        }
        buildValues(tbody, colAttrHeaders, rowAttrHeaders, rowAttrs, colAttrs, opts);
        tr = buildColTotalsHeader(longestGroupLength(opts.rowSubtotalDisplay.splitPositions), colAttrs);
        if (colAttrs.length > 0) {
          buildColTotals(tr, colAttrHeaders, rowAttrs, colAttrs, opts);
        }
        buildGrandTotal(tbody, tr, rowAttrs, colAttrs, opts);
        collapseColAxis(colAxisHeaders, opts.colSubtotalDisplay.collapseAt, colAttrs, opts.colSubtotalDisplay);
        collapseRowAxis(rowAxisHeaders, opts.rowSubtotalDisplay.collapseAt, rowAttrs, opts.rowSubtotalDisplay);
        resultTable.setAttribute("data-numrows", rowKeys.length);
        resultTable.setAttribute("data-numcols", colKeys.length);
        resultTable.style.display = "";
        return resultTable;
      };
      return main(rowAttrs, rowKeys, colAttrs, colKeys);
    };
    $.pivotUtilities.subtotal_renderers = {
      "Table With Subtotal": function(pvtData, opts) {
        return SubtotalRenderer(pvtData, opts);
      },
      "Table With Subtotal Bar Chart": function(pvtData, opts) {
        return $(SubtotalRenderer(pvtData, opts)).barchart();
      },
      "Table With Subtotal Heatmap": function(pvtData, opts) {
        return $(SubtotalRenderer(pvtData, opts)).heatmap("heatmap", opts);
      },
      "Table With Subtotal Row Heatmap": function(pvtData, opts) {
        return $(SubtotalRenderer(pvtData, opts)).heatmap("rowheatmap", opts);
      },
      "Table With Subtotal Col Heatmap": function(pvtData, opts) {
        return $(SubtotalRenderer(pvtData, opts)).heatmap("colheatmap", opts);
      }
    };
    usFmtPct = $.pivotUtilities.numberFormat({
      digitsAfterDecimal: 1,
      scaler: 100,
      suffix: "%"
    });
    aggregatorTemplates = $.pivotUtilities.aggregatorTemplates;
    subtotalAggregatorTemplates = {
      fractionOf: function(wrapped, type, formatter) {
        if (type == null) {
          type = "row";
        }
        if (formatter == null) {
          formatter = usFmtPct;
        }
        return function() {
          var x;
          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return function(data, rowKey, colKey) {
            if (typeof rowKey === "undefined") {
              rowKey = [];
            }
            if (typeof colKey === "undefined") {
              colKey = [];
            }
            return {
              selector: {
                row: [rowKey.slice(0, -1), []],
                col: [[], colKey.slice(0, -1)]
              }[type],
              inner: wrapped.apply(null, x)(data, rowKey, colKey),
              push: function(record) {
                return this.inner.push(record);
              },
              format: formatter,
              value: function() {
                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();
              },
              numInputs: wrapped.apply(null, x)().numInputs
            };
          };
        };
      }
    };
    $.pivotUtilities.subtotalAggregatorTemplates = subtotalAggregatorTemplates;
    return $.pivotUtilities.subtotal_aggregators = (function(tpl, sTpl) {
      return {
        "Sum As Fraction Of Parent Row": sTpl.fractionOf(tpl.sum(), "row", usFmtPct),
        "Sum As Fraction Of Parent Column": sTpl.fractionOf(tpl.sum(), "col", usFmtPct),
        "Count As Fraction Of Parent Row": sTpl.fractionOf(tpl.count(), "row", usFmtPct),
        "Count As Fraction Of Parent Column": sTpl.fractionOf(tpl.count(), "col", usFmtPct)
      };
    })(aggregatorTemplates, subtotalAggregatorTemplates);
  });

}).call(this);

//# sourceMappingURL=subtotal.js.map
